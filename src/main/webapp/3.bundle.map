{"version":3,"sources":["webpack:///3.chunk.js","webpack:///./src/app/globalServices/api/API_Task.service.ts?c4d4","webpack:///./src/app/globalServices/entitiesDTO/projectDTO.class.ts?2eff","webpack:///./src/app/globalServices/entitiesDTO/serializable.class.ts?ce8b","webpack:///./src/app/timeTracker/reports/reports.component.ts","webpack:///./src/app/timeTracker/reports/reports.html"],"names":["webpackJsonp","751","module","exports","__webpack_require__","core_1","http_1","API_Task","http","this","prototype","getJsonHeader","headers","Headers","append","getUrlencodedHeader","correctOffset","offset","replace","getProjectHighTaskList","projectId","utcOffset","params","URLSearchParams","set","get","search","map","res","json","getCreatedTaskList","createTask","taskName","projectName","transferData","JSON","stringify","name","ancestorProjectId","post","addTaskExecutor","taskId","userId","id","put","changeName","changeStatus","status","changeDescription","description","checkLowLevelAuthorities","__decorate","Injectable","__metadata","Http","749","serializable_class_ts_1","ProjectDTO","_super","apply","arguments","taskList","__extends","Serializable","748","fillFromJSON","jsonObj","parse","propName","466","API_Project_service_1","API_Task_service_1","projectDTO_class_1","dateFormatter_service_1","Reports","api_Project","api_Task","dateFormatter","reportTypeList","projectList","ngOnInit","getCurrentUserProjects","reportTypeSelected","selectedType","getCurrentUserTaskList","_this","getCreatedProjectList","getUtcOffset","subscribe","data","console","log","pushTransferProjectListToProject","responseObjects","error","i","length","newProjectDTO","creationDateTime","changeDateTimeToRuWithPattern","push","Component","selector","providers","API_Project","directives","pipes","encapsulation","ViewEncapsulation","Native","styles","template","DateFormatter","776","777"],"mappings":"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","file":"3.chunk.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 751:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar http_1 = __webpack_require__(136);\r\n\t__webpack_require__(219);\r\n\tvar API_Task = (function () {\r\n\t    function API_Task(http) {\r\n\t        this.http = http;\r\n\t    }\r\n\t    API_Task.prototype.getJsonHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/json');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Task.prototype.getUrlencodedHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Task.prototype.correctOffset = function (offset) {\r\n\t        return offset.replace('+', '%2B');\r\n\t    };\r\n\t    API_Task.prototype.getProjectHighTaskList = function (projectId, utcOffset) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('projectId', projectId);\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        return this.http.get('/api/task/getProjectHighTaskList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.getCreatedTaskList = function (utcOffset) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        return this.http.get('/api/task/getCreatedTaskList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.createTask = function (taskName, projectName, utcOffset) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        var transferData = JSON.stringify({ name: taskName, ancestorProjectId: projectName });\r\n\t        return this.http.post('/api/task/createTask', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.addTaskExecutor = function (taskId, userId) {\r\n\t        var transferData = JSON.stringify({ id: userId });\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('taskId', taskId);\r\n\t        return this.http.put('/api/task/addTaskExecutor', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeName = function (taskId, name) {\r\n\t        var transferData = JSON.stringify({ id: taskId, name: name });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setName', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeStatus = function (taskId, status) {\r\n\t        var transferData = JSON.stringify({ id: taskId, status: status });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setStatus', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeDescription = function (taskId, description) {\r\n\t        var transferData = JSON.stringify({ id: taskId, description: description });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setDescription', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.checkLowLevelAuthorities = function (taskId) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('id', taskId);\r\n\t        return this.http.get('/api/task/checkLowLevelAuthorities', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [http_1.Http])\r\n\t    ], API_Task);\r\n\t    return API_Task;\r\n\t}());\r\n\texports.API_Task = API_Task;\r\n\n\n/***/ },\n\n/***/ 749:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(748);\r\n\tvar ProjectDTO = (function (_super) {\r\n\t    __extends(ProjectDTO, _super);\r\n\t    function ProjectDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.taskList = [];\r\n\t    }\r\n\t    return ProjectDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.ProjectDTO = ProjectDTO;\r\n\n\n/***/ },\n\n/***/ 748:\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Serializable = (function () {\r\n\t    function Serializable() {\r\n\t    }\r\n\t    Serializable.prototype.fillFromJSON = function (json) {\r\n\t        var jsonObj = JSON.parse(json);\r\n\t        for (var propName in jsonObj)\r\n\t            this[propName] = jsonObj[propName];\r\n\t    };\r\n\t    return Serializable;\r\n\t}());\r\n\texports.Serializable = Serializable;\r\n\n\n/***/ },\n\n/***/ 466:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar API_Project_service_1 = __webpack_require__(463);\r\n\tvar API_Task_service_1 = __webpack_require__(751);\r\n\tvar projectDTO_class_1 = __webpack_require__(749);\r\n\tvar dateFormatter_service_1 = __webpack_require__(462);\r\n\tvar Reports = (function () {\r\n\t    function Reports(api_Project, api_Task, dateFormatter) {\r\n\t        this.api_Project = api_Project;\r\n\t        this.api_Task = api_Task;\r\n\t        this.dateFormatter = dateFormatter;\r\n\t        this.reportTypeList = ['Проект', 'Задача'];\r\n\t        this.projectList = [];\r\n\t    }\r\n\t    Reports.prototype.ngOnInit = function () {\r\n\t        this.getCurrentUserProjects();\r\n\t    };\r\n\t    Reports.prototype.reportTypeSelected = function () {\r\n\t        if (this.selectedType == this.reportTypeList[0])\r\n\t            this.getCurrentUserProjects();\r\n\t        if (this.selectedType == this.reportTypeList[1])\r\n\t            this.getCurrentUserTaskList();\r\n\t    };\r\n\t    Reports.prototype.getCurrentUserProjects = function () {\r\n\t        var _this = this;\r\n\t        this.api_Project.getCreatedProjectList(this.dateFormatter.getUtcOffset()).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            _this.pushTransferProjectListToProject(data.responseObjects.projectList);\r\n\t        }, function (error) {\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.pushTransferProjectListToProject = function (data) {\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            var newProjectDTO = new projectDTO_class_1.ProjectDTO();\r\n\t            newProjectDTO.fillFromJSON(JSON.stringify(data[i]));\r\n\t            newProjectDTO.creationDateTime = this.dateFormatter\r\n\t                .changeDateTimeToRuWithPattern(newProjectDTO.creationDateTime, \"Do MMMM YYYY\");\r\n\t            this.projectList.push(newProjectDTO);\r\n\t        }\r\n\t    };\r\n\t    Reports.prototype.getCurrentUserTaskList = function () {\r\n\t        var _this = this;\r\n\t        this.api_Task.getCreatedTaskList(this.dateFormatter.getUtcOffset()).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            _this.pushTransferProjectListToProject(data.responseObjects.projectList);\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'reports',\r\n\t            providers: [API_Project_service_1.API_Project, API_Task_service_1.API_Task],\r\n\t            directives: [],\r\n\t            pipes: [],\r\n\t            encapsulation: core_1.ViewEncapsulation.Native,\r\n\t            styles: [__webpack_require__(776)],\r\n\t            template: __webpack_require__(777)\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [API_Project_service_1.API_Project, API_Task_service_1.API_Task, dateFormatter_service_1.DateFormatter])\r\n\t    ], Reports);\r\n\t    return Reports;\r\n\t}());\r\n\texports.Reports = Reports;\r\n\n\n/***/ },\n\n/***/ 776:\n565,\n\n/***/ 777:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<select [(ngModel)]=\\\"selectedType\\\"\\n        (ngModelChange)=\\\"reportTypeSelected()\\\">\\n  <option selected>Выберите отчет</option>\\n  <option *ngFor=\\\"let reportType of reportTypeList\\\">\\n    {{reportType}}\\n  </option>\\n\\n</select>\\n\\n<select>\\n  <option>Выберете конкретный проект или задачу</option>\\n  <option *ngFor=\\\"let project of projectList\\\">\\n    {{project.name}}\\n  </option>\\n</select>\\n\\n<label>С</label>\\n<input placeholder=\\\"укажите дату в формате dd-mm-yyyy\\\">\\n<label>По</label>\\n<input placeholder=\\\"укажите дату в формате dd-mm-yyyy\\\">\\n\\n<select>\\n  <option>Можете указать сотрудников</option>\\n  <option>Все</option>\\n</select>\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 3.chunk.js\n **/","import {Injectable} from \"@angular/core\";\nimport {Http, Headers,URLSearchParams} from \"@angular/http\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class API_Task {\n  constructor(private http:Http) {\n  }\n\n  private getJsonHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return headers\n  }\n\n  private getUrlencodedHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return headers\n  }\n\n  private correctOffset(offset:string):string {\n    return offset.replace('+', '%2B')\n  }\n\n\n  public getProjectHighTaskList(projectId:string, utcOffset:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('projectId', projectId);\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    return this.http.get('/api/task/getProjectHighTaskList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n\n  public getCreatedTaskList(utcOffset:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    return this.http.get('/api/task/getCreatedTaskList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public createTask(taskName:string, projectName:string, utcOffset:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n\n    let transferData:any = JSON.stringify({name: taskName, ancestorProjectId: projectName});\n\n    return this.http.post('/api/task/createTask', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public addTaskExecutor(taskId:string, userId:string):any {\n    let transferData:any = JSON.stringify({id: userId});\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('taskId', taskId);\n\n    return this.http.put('/api/task/addTaskExecutor', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n\n  }\n\n  public changeName(taskId:string, name:string):any {\n    let transferData:any = JSON.stringify({id: taskId, name: name});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setName', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public changeStatus(taskId:string, status:string):any {\n    let transferData:any = JSON.stringify({id: taskId, status: status});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setStatus', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public changeDescription(taskId:string, description:string):any {\n    let transferData:any = JSON.stringify({id: taskId, description: description});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setDescription', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public checkLowLevelAuthorities(taskId:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('id', taskId);\n    return this.http.get('/api/task/checkLowLevelAuthorities', {\n      headers: headers, search: params\n    }).map(res => res.json());\n\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/api/API_Task.service.ts\n **/","import {Serializable} from './serializable.class.ts'\n\nimport {TaskDTO} from './taskDTO.class'\nimport {UserDTO} from './userDTO.class'\n\nexport class ProjectDTO extends Serializable{\n  id:string;\n  name:string;\n  description:string;\n  creationDateTime:string;\n  status:string;\n  taskList:TaskDTO[]=[];\n  owner:UserDTO;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/projectDTO.class.ts\n **/","export class Serializable {\n  public fillFromJSON(json: string):void {\n    var jsonObj = JSON.parse(json);\n    for (var propName in jsonObj)\n      this[propName] = jsonObj[propName]\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/serializable.class.ts\n **/","import {Component,ViewEncapsulation} from '@angular/core';\n\nimport {API_Project} from '../../globalServices/api/API_Project.service';\nimport {API_Task} from '../../globalServices/api/API_Task.service';\nimport {ProjectDTO} from '../../globalServices/entitiesDTO/projectDTO.class';\nimport {TaskDTO} from '../../globalServices/entitiesDTO/taskDTO.class';\nimport {ReportDTO} from '../../globalServices/entitiesDTO/reportDTO.class';\nimport {UserDTO} from '../../globalServices/entitiesDTO/userDTO.class';\nimport {DateFormatter} from '../../globalServices/dateFromatter/dateFormatter.service';\n\n\n@Component({\n  selector: 'reports',\n  providers: [API_Project,API_Task],\n  directives: [],\n  pipes: [],\n  encapsulation: ViewEncapsulation.Native,\n  styles: [require('./reports.css')],\n  template: require('./reports.html')\n})\nexport class Reports {\n\n  private reportTypeList:string[]=['Проект','Задача'];\n  private selectedType:string;\n  private projectList:ProjectDTO[]=[];\n\n\n  constructor(private api_Project:API_Project,\n              private api_Task:API_Task,\n              private dateFormatter:DateFormatter) {\n\n  }\n\n  public ngOnInit():void{\n      this.getCurrentUserProjects();\n  }\n\n  public reportTypeSelected(){\n     if(this.selectedType==this.reportTypeList[0])\n       this.getCurrentUserProjects();\n    if(this.selectedType==this.reportTypeList[1])\n      this.getCurrentUserTaskList();\n  }\n\n\n  public getCurrentUserProjects():void{\n    this.api_Project.getCreatedProjectList(this.dateFormatter.getUtcOffset()).subscribe(\n      data => {\n        console.log(data);\n        this.pushTransferProjectListToProject(data.responseObjects.projectList);\n      },\n      error => {\n\n      }\n    );\n  }\n\n  public pushTransferProjectListToProject(data:any[]):void {\n    for (let i = 0; i < data.length; i++) {\n      let newProjectDTO = new ProjectDTO();\n      newProjectDTO.fillFromJSON(JSON.stringify(data[i]));\n      newProjectDTO.creationDateTime = this.dateFormatter\n        .changeDateTimeToRuWithPattern(newProjectDTO.creationDateTime, \"Do MMMM YYYY\");\n      this.projectList.push(newProjectDTO);\n    }\n  }\n\n\n  public getCurrentUserTaskList():void{\n    this.api_Task.getCreatedTaskList(this.dateFormatter.getUtcOffset()).subscribe(\n      data => {\n        console.log(data);\n        this.pushTransferProjectListToProject(data.responseObjects.projectList);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/timeTracker/reports/reports.component.ts\n **/","module.exports = \"<select [(ngModel)]=\\\"selectedType\\\"\\n        (ngModelChange)=\\\"reportTypeSelected()\\\">\\n  <option selected>Выберите отчет</option>\\n  <option *ngFor=\\\"let reportType of reportTypeList\\\">\\n    {{reportType}}\\n  </option>\\n\\n</select>\\n\\n<select>\\n  <option>Выберете конкретный проект или задачу</option>\\n  <option *ngFor=\\\"let project of projectList\\\">\\n    {{project.name}}\\n  </option>\\n</select>\\n\\n<label>С</label>\\n<input placeholder=\\\"укажите дату в формате dd-mm-yyyy\\\">\\n<label>По</label>\\n<input placeholder=\\\"укажите дату в формате dd-mm-yyyy\\\">\\n\\n<select>\\n  <option>Можете указать сотрудников</option>\\n  <option>Все</option>\\n</select>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/timeTracker/reports/reports.html\n ** module id = 777\n ** module chunks = 3\n **/"],"sourceRoot":""}