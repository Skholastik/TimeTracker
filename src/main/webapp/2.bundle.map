{"version":3,"sources":["webpack:///2.chunk.js","webpack:///./src/app/globalServices/api/API_Report.service.ts","webpack:///./src/app/globalServices/api/API_Task.service.ts","webpack:///./src/app/globalServices/api/API_User.service.ts","webpack:///./src/app/globalServices/entitiesDTO/projectDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/reportDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/reporterDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/serializable.class.ts","webpack:///./src/app/globalServices/entitiesDTO/taskDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/userDTO.class.ts","webpack:///./src/app/timeTracker/reports/reportShowBar/reportShowBar.component.ts","webpack:///./src/app/timeTracker/reports/reportShowBar/reportShowBar.html","webpack:///./src/app/timeTracker/reports/reports.component.ts","webpack:///./src/app/timeTracker/reports/reports.html"],"names":["webpackJsonp","751","module","exports","__webpack_require__","core_1","http_1","API_Report","http","this","prototype","getJsonHeader","headers","Headers","append","getUrlencodedHeader","correctOffset","offset","replace","createReport","report","workTime","workDate","taskId","utcOffset","params","URLSearchParams","set","transferData","JSON","stringify","post","search","map","res","json","getTaskAllReportList","get","getProjectReportList","projectId","userId","startDate","endDate","length","getTaskReportList","__decorate","Injectable","__metadata","Http","750","API_Task","getProjectHighTaskList","getCreatedTaskList","createTask","taskName","projectName","name","ancestorProjectId","addTaskExecutor","id","put","changeName","changeStatus","status","changeDescription","description","checkLowLevelAuthorities","753","API_User","getUserList","getParticipantProjectUserList","undefined","getParticipantTaskUserList","752","serializable_class_ts_1","ProjectDTO","_super","apply","arguments","taskList","__extends","Serializable","754","ReportDTO","757","ReporterDTO","reportList","748","fillFromJSON","jsonObj","parse","propName","749","TaskDTO","reporterList","755","UserDTO","763","ReportShowBar","ngOnInit","Input","Object","Component","selector","providers","directives","pipes","encapsulation","ViewEncapsulation","Native","styles","template","778","779","466","common_1","API_Report_service_1","API_Project_service_1","API_Task_service_1","API_User_service_1","projectDTO_class_1","taskDTO_class_1","reportDTO_class_1","reporterDTO_class_1","userDTO_class_1","dateFormatter_service_1","reportShowBar_component_1","Reports","api_Report","api_Project","api_Task","api_User","dateFormatter","formBuilder","reportTypeList","projectList","participantList","reportProjectList","reportForm","group","reportType","Validators","required","projectOrTaskId","value","console","log","createProjectReport","createTaskReport","_this","getUtcOffset","subscribe","data","responseObjects","fillDetailReportProjectList","error","getProjectOrTaskList","splice","getProjectParticipant","getProjectList","getTaskList","getCreatedProjectList","pushTransferProjectListToDTO","pushTransferTaskListToDTO","i","newProjectDTO","creationDateTime","changeDateTimeToRuWithPattern","push","newTaskDTO","getParticipantUserList","getTaskParticipant","userList","newUserDTO","x","z","newReporterDTO","taskElapsedTime","y","newReportDTO","API_Project","DateFormatter","FormBuilder","780","781"],"mappings":"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","file":"2.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 751:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar http_1 = __webpack_require__(136);\r\n\t__webpack_require__(219);\r\n\tvar API_Report = (function () {\r\n\t    function API_Report(http) {\r\n\t        this.http = http;\r\n\t    }\r\n\t    API_Report.prototype.getJsonHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/json');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Report.prototype.getUrlencodedHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Report.prototype.correctOffset = function (offset) {\r\n\t        return offset.replace('+', '%2B');\r\n\t    };\r\n\t    API_Report.prototype.createReport = function (report, workTime, workDate, taskId, utcOffset) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        params.set('taskId', taskId);\r\n\t        var transferData = JSON.stringify({\r\n\t            report: report,\r\n\t            workTime: workTime,\r\n\t            workDate: workDate,\r\n\t        });\r\n\t        return this.http.post('/api/report/createReport', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report.prototype.getTaskAllReportList = function (taskId, utcOffset) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        params.set('taskId', taskId);\r\n\t        return this.http.get('/api/report/getTaskAllReportList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report.prototype.getProjectReportList = function (utcOffset, projectId, userId, startDate, endDate) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        if (projectId.length != 0)\r\n\t            params.set('projectId', projectId);\r\n\t        if (userId.length != 0)\r\n\t            params.set('creatorId', userId);\r\n\t        if (startDate.length != 0)\r\n\t            params.set('startDate', startDate);\r\n\t        if (endDate.length != 0)\r\n\t            params.set('endDate', endDate);\r\n\t        return this.http.get('/api/report/getProjectReportList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report.prototype.getTaskReportList = function (utcOffset, projectId, userId, startDate, endDate) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        if (projectId.length != 0)\r\n\t            params.set('taskId', projectId);\r\n\t        if (userId.length != 0)\r\n\t            params.set('creatorId', userId);\r\n\t        if (startDate.length != 0)\r\n\t            params.set('startDate', startDate);\r\n\t        if (endDate.length != 0)\r\n\t            params.set('endDate', endDate);\r\n\t        return this.http.get('/api/report/getTaskReportList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [http_1.Http])\r\n\t    ], API_Report);\r\n\t    return API_Report;\r\n\t}());\r\n\texports.API_Report = API_Report;\r\n\n\n/***/ },\n\n/***/ 750:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar http_1 = __webpack_require__(136);\r\n\t__webpack_require__(219);\r\n\tvar API_Task = (function () {\r\n\t    function API_Task(http) {\r\n\t        this.http = http;\r\n\t    }\r\n\t    API_Task.prototype.getJsonHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/json');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Task.prototype.getUrlencodedHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Task.prototype.correctOffset = function (offset) {\r\n\t        return offset.replace('+', '%2B');\r\n\t    };\r\n\t    API_Task.prototype.getProjectHighTaskList = function (projectId, utcOffset) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('projectId', projectId);\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        return this.http.get('/api/task/getProjectHighTaskList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.getCreatedTaskList = function (utcOffset) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        return this.http.get('/api/task/getCreatedTaskList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.createTask = function (taskName, projectName, utcOffset) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        var transferData = JSON.stringify({ name: taskName, ancestorProjectId: projectName });\r\n\t        return this.http.post('/api/task/createTask', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.addTaskExecutor = function (taskId, userId) {\r\n\t        var transferData = JSON.stringify({ id: userId });\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('taskId', taskId);\r\n\t        return this.http.put('/api/task/addTaskExecutor', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeName = function (taskId, name) {\r\n\t        var transferData = JSON.stringify({ id: taskId, name: name });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setName', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeStatus = function (taskId, status) {\r\n\t        var transferData = JSON.stringify({ id: taskId, status: status });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setStatus', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeDescription = function (taskId, description) {\r\n\t        var transferData = JSON.stringify({ id: taskId, description: description });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setDescription', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.checkLowLevelAuthorities = function (taskId) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('id', taskId);\r\n\t        return this.http.get('/api/task/checkLowLevelAuthorities', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [http_1.Http])\r\n\t    ], API_Task);\r\n\t    return API_Task;\r\n\t}());\r\n\texports.API_Task = API_Task;\r\n\n\n/***/ },\n\n/***/ 753:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar http_1 = __webpack_require__(136);\r\n\t__webpack_require__(219);\r\n\tvar API_User = (function () {\r\n\t    function API_User(http) {\r\n\t        this.http = http;\r\n\t    }\r\n\t    API_User.prototype.getJsonHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/json');\r\n\t        return headers;\r\n\t    };\r\n\t    API_User.prototype.getUrlencodedHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\t        return headers;\r\n\t    };\r\n\t    API_User.prototype.correctOffset = function (offset) {\r\n\t        return offset.replace('+', '%2B');\r\n\t    };\r\n\t    API_User.prototype.getUserList = function () {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        return this.http.get('/api/user/getUserList').map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_User.prototype.getParticipantProjectUserList = function (projectId) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        if (projectId != undefined)\r\n\t            params.set('projectId', projectId);\r\n\t        return this.http.get('/api/user/getParticipantProjectUserList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_User.prototype.getParticipantTaskUserList = function (taskId) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('taskId', taskId);\r\n\t        return this.http.get('/api/user/getParticipantTaskUserList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_User = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [http_1.Http])\r\n\t    ], API_User);\r\n\t    return API_User;\r\n\t}());\r\n\texports.API_User = API_User;\r\n\n\n/***/ },\n\n/***/ 752:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(748);\r\n\tvar ProjectDTO = (function (_super) {\r\n\t    __extends(ProjectDTO, _super);\r\n\t    function ProjectDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.taskList = [];\r\n\t    }\r\n\t    return ProjectDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.ProjectDTO = ProjectDTO;\r\n\n\n/***/ },\n\n/***/ 754:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(748);\r\n\tvar ReportDTO = (function (_super) {\r\n\t    __extends(ReportDTO, _super);\r\n\t    function ReportDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    return ReportDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.ReportDTO = ReportDTO;\r\n\n\n/***/ },\n\n/***/ 757:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(748);\r\n\tvar ReporterDTO = (function (_super) {\r\n\t    __extends(ReporterDTO, _super);\r\n\t    function ReporterDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.reportList = [];\r\n\t    }\r\n\t    return ReporterDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.ReporterDTO = ReporterDTO;\r\n\n\n/***/ },\n\n/***/ 748:\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Serializable = (function () {\r\n\t    function Serializable() {\r\n\t    }\r\n\t    Serializable.prototype.fillFromJSON = function (json) {\r\n\t        var jsonObj = JSON.parse(json);\r\n\t        for (var propName in jsonObj)\r\n\t            this[propName] = jsonObj[propName];\r\n\t    };\r\n\t    return Serializable;\r\n\t}());\r\n\texports.Serializable = Serializable;\r\n\n\n/***/ },\n\n/***/ 749:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(748);\r\n\tvar TaskDTO = (function (_super) {\r\n\t    __extends(TaskDTO, _super);\r\n\t    function TaskDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.reporterList = [];\r\n\t    }\r\n\t    return TaskDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.TaskDTO = TaskDTO;\r\n\n\n/***/ },\n\n/***/ 755:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(748);\r\n\tvar UserDTO = (function (_super) {\r\n\t    __extends(UserDTO, _super);\r\n\t    function UserDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    return UserDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.UserDTO = UserDTO;\r\n\n\n/***/ },\n\n/***/ 763:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar ReportShowBar = (function () {\r\n\t    function ReportShowBar() {\r\n\t    }\r\n\t    ReportShowBar.prototype.ngOnInit = function () {\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Input(), \r\n\t        __metadata('design:type', Object)\r\n\t    ], ReportShowBar.prototype, \"reportList\", void 0);\r\n\t    ReportShowBar = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'report-show-bar',\r\n\t            providers: [],\r\n\t            directives: [],\r\n\t            pipes: [],\r\n\t            encapsulation: core_1.ViewEncapsulation.Native,\r\n\t            styles: [__webpack_require__(778)],\r\n\t            template: __webpack_require__(779)\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], ReportShowBar);\r\n\t    return ReportShowBar;\r\n\t}());\r\n\texports.ReportShowBar = ReportShowBar;\r\n\n\n/***/ },\n\n/***/ 778:\n565,\n\n/***/ 779:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<h1>SHowBar как=никак</h1>\\n\"\n\n/***/ },\n\n/***/ 466:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar common_1 = __webpack_require__(53);\r\n\tvar API_Report_service_1 = __webpack_require__(751);\r\n\tvar API_Project_service_1 = __webpack_require__(463);\r\n\tvar API_Task_service_1 = __webpack_require__(750);\r\n\tvar API_User_service_1 = __webpack_require__(753);\r\n\tvar projectDTO_class_1 = __webpack_require__(752);\r\n\tvar taskDTO_class_1 = __webpack_require__(749);\r\n\tvar reportDTO_class_1 = __webpack_require__(754);\r\n\tvar reporterDTO_class_1 = __webpack_require__(757);\r\n\tvar userDTO_class_1 = __webpack_require__(755);\r\n\tvar dateFormatter_service_1 = __webpack_require__(462);\r\n\tvar reportShowBar_component_1 = __webpack_require__(763);\r\n\tvar Reports = (function () {\r\n\t    function Reports(api_Report, api_Project, api_Task, api_User, dateFormatter, formBuilder) {\r\n\t        this.api_Report = api_Report;\r\n\t        this.api_Project = api_Project;\r\n\t        this.api_Task = api_Task;\r\n\t        this.api_User = api_User;\r\n\t        this.dateFormatter = dateFormatter;\r\n\t        this.formBuilder = formBuilder;\r\n\t        this.reportTypeList = ['Проект', 'Задача'];\r\n\t        this.projectList = [];\r\n\t        this.taskList = [];\r\n\t        this.participantList = [];\r\n\t        this.reportProjectList = [];\r\n\t    }\r\n\t    Reports.prototype.ngOnInit = function () {\r\n\t        this.reportForm = this.formBuilder.group({\r\n\t            'reportType': ['', common_1.Validators.required],\r\n\t            'projectOrTaskId': [''],\r\n\t            'userId': [''],\r\n\t            'startDate': [''],\r\n\t            'endDate': [''],\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.createReport = function (value) {\r\n\t        if (value.reportType == this.reportTypeList[0]) {\r\n\t            if (this.participantList.length == 0)\r\n\t                console.log('Отчеты по проектам отсутствуют, т.к нету исполнителей');\r\n\t            else\r\n\t                this.createProjectReport(value);\r\n\t        }\r\n\t        if (value.reportType == this.reportTypeList[1]) {\r\n\t            if (this.participantList.length == 0)\r\n\t                console.log('Отчеты по задачам отсутствуют, т.к нету исполнителей');\r\n\t            else\r\n\t                this.createTaskReport(value);\r\n\t        }\r\n\t    };\r\n\t    Reports.prototype.createProjectReport = function (value) {\r\n\t        var _this = this;\r\n\t        this.api_Report.getProjectReportList(this.dateFormatter.getUtcOffset(), value.projectOrTaskId, value.userId, value.startDate, value.endDate).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            _this.reportList = data.responseObjects.reportProjectList;\r\n\t            _this.fillDetailReportProjectList(data.responseObjects.reportProjectList);\r\n\t            console.log(_this.reportProjectList);\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.createTaskReport = function (value) {\r\n\t        var _this = this;\r\n\t        this.api_Report.getTaskReportList(this.dateFormatter.getUtcOffset(), value.projectOrTaskId, value.userId, value.startDate, value.endDate).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            _this.reportList = data.responseObjects.reportList;\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    /** Загружает массив доступных проектов либо заданий для данного пользователя,\r\n\t     * в зависимости от выбранного типа отчета. Так же получает список пользователей,\r\n\t     * доступных для просмотра отчета*/\r\n\t    Reports.prototype.getProjectOrTaskList = function (reportType) {\r\n\t        this.participantList.splice(0);\r\n\t        this.getProjectParticipant();\r\n\t        if (reportType === this.reportTypeList[0]\r\n\t            && this.projectList.length == 0)\r\n\t            this.getProjectList();\r\n\t        if (reportType === this.reportTypeList[1]\r\n\t            && this.taskList.length == 0)\r\n\t            this.getTaskList();\r\n\t    };\r\n\t    Reports.prototype.getProjectList = function () {\r\n\t        var _this = this;\r\n\t        this.api_Project.getCreatedProjectList(this.dateFormatter.getUtcOffset()).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            _this.pushTransferProjectListToDTO(data.responseObjects.projectList);\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.getTaskList = function () {\r\n\t        var _this = this;\r\n\t        this.api_Task.getCreatedTaskList(this.dateFormatter.getUtcOffset()).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            _this.pushTransferTaskListToDTO(data.responseObjects.taskList);\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.pushTransferProjectListToDTO = function (data) {\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            var newProjectDTO = new projectDTO_class_1.ProjectDTO();\r\n\t            newProjectDTO.fillFromJSON(JSON.stringify(data[i]));\r\n\t            newProjectDTO.creationDateTime = this.dateFormatter\r\n\t                .changeDateTimeToRuWithPattern(newProjectDTO.creationDateTime, \"Do MMMM YYYY\");\r\n\t            this.projectList.push(newProjectDTO);\r\n\t        }\r\n\t    };\r\n\t    Reports.prototype.pushTransferTaskListToDTO = function (data) {\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            var newTaskDTO = new taskDTO_class_1.TaskDTO();\r\n\t            newTaskDTO.fillFromJSON(JSON.stringify(data[i]));\r\n\t            newTaskDTO.creationDateTime = this.dateFormatter\r\n\t                .changeDateTimeToRuWithPattern(newTaskDTO.creationDateTime, \"Do MMMM YYYY\");\r\n\t            this.taskList.push(newTaskDTO);\r\n\t        }\r\n\t    };\r\n\t    Reports.prototype.getParticipantUserList = function (reportType, projectOrTaskId) {\r\n\t        this.participantList.splice(0);\r\n\t        if (projectOrTaskId.length != 0) {\r\n\t            if (reportType == this.reportTypeList[0])\r\n\t                this.getProjectParticipant(projectOrTaskId);\r\n\t            if (reportType == this.reportTypeList[1])\r\n\t                this.getTaskParticipant(projectOrTaskId);\r\n\t        }\r\n\t        else\r\n\t            this.getProjectParticipant();\r\n\t    };\r\n\t    Reports.prototype.getProjectParticipant = function (projectId) {\r\n\t        var _this = this;\r\n\t        this.api_User.getParticipantProjectUserList(projectId).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            for (var i = 0; i < data.responseObjects.userList.length; i++) {\r\n\t                var newUserDTO = new userDTO_class_1.UserDTO();\r\n\t                newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\r\n\t                _this.participantList.push(newUserDTO);\r\n\t            }\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.getTaskParticipant = function (taskId) {\r\n\t        var _this = this;\r\n\t        this.api_User.getParticipantTaskUserList(taskId).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            for (var i = 0; i < data.responseObjects.userList.length; i++) {\r\n\t                var newUserDTO = new userDTO_class_1.UserDTO();\r\n\t                newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\r\n\t                _this.participantList.push(newUserDTO);\r\n\t            }\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.fillDetailReportProjectList = function (data) {\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            var newProjectDTO = new projectDTO_class_1.ProjectDTO();\r\n\t            newProjectDTO.id = data[i].id;\r\n\t            newProjectDTO.name = data[i].name;\r\n\t            console.log(newProjectDTO);\r\n\t            for (var x = 0; x < data[i].taskList.length; x++) {\r\n\t                var newTaskDTO = new taskDTO_class_1.TaskDTO();\r\n\t                newTaskDTO.id = data[i].taskList[x].id;\r\n\t                newTaskDTO.name = data[i].taskList[x].name;\r\n\t                console.log(newTaskDTO);\r\n\t                for (var z = 0; z < data[i].taskList[x].reporterList.length; z++) {\r\n\t                    var newReporterDTO = new reporterDTO_class_1.ReporterDTO();\r\n\t                    newReporterDTO.id = data[z].taskList[x].reporterList[z].id;\r\n\t                    newReporterDTO.name = data[i].taskList[x].reporterList[z].name;\r\n\t                    newReporterDTO.taskElapsedTime = data[i].taskList[x].reporterList[z].taskElapsedTime;\r\n\t                    console.log(newReporterDTO);\r\n\t                    for (var y = 0; y < data[i].taskList[x].reporterList[z].reportList.length; z++) {\r\n\t                        var newReportDTO = new reportDTO_class_1.ReportDTO();\r\n\t                        newReportDTO.fillFromJSON(JSON.stringify(data[i].taskList[x].reporterList[z].reportList[y]));\r\n\t                        newReportDTO.creationDateTime = this.dateFormatter\r\n\t                            .changeDateTimeToRuWithPattern(newReportDTO.creationDateTime, \"Do MMMM YYYY\");\r\n\t                        console.log(newReportDTO);\r\n\t                        newReporterDTO.reportList.push(newReportDTO);\r\n\t                        console.log('ОПа');\r\n\t                    }\r\n\t                    newTaskDTO.reporterList.push(newReporterDTO);\r\n\t                }\r\n\t                newProjectDTO.taskList.push(newTaskDTO);\r\n\t            }\r\n\t            this.reportProjectList.push(newProjectDTO);\r\n\t        }\r\n\t    };\r\n\t    Reports = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'reports',\r\n\t            providers: [API_Project_service_1.API_Project, API_Task_service_1.API_Task, API_User_service_1.API_User, API_Report_service_1.API_Report],\r\n\t            directives: [reportShowBar_component_1.ReportShowBar],\r\n\t            pipes: [],\r\n\t            encapsulation: core_1.ViewEncapsulation.Native,\r\n\t            styles: [__webpack_require__(780)],\r\n\t            template: __webpack_require__(781)\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [API_Report_service_1.API_Report, API_Project_service_1.API_Project, API_Task_service_1.API_Task, API_User_service_1.API_User, dateFormatter_service_1.DateFormatter, common_1.FormBuilder])\r\n\t    ], Reports);\r\n\t    return Reports;\r\n\t}());\r\n\texports.Reports = Reports;\r\n\n\n/***/ },\n\n/***/ 780:\n565,\n\n/***/ 781:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<form id=\\\"reportForm\\\"\\n      [ngFormModel]=\\\"reportForm\\\"\\n      (ngSubmit)=\\\"createReport(reportForm.value)\\\">\\n\\n  <div id=\\\"reportType\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['reportType']\\\"\\n            (ngModelChange)=\\\"getProjectOrTaskList(reportForm.value.reportType)\\\">\\n\\n      <option value=\\\"\\\">Выберите тип отчета</option>\\n\\n      <option\\n        *ngFor=\\\"let reportType of reportTypeList\\\">\\n        {{reportType}}\\n      </option>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"projectOrTaskId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['projectOrTaskId']\\\"\\n            (ngModelChange)=\\\"getParticipantUserList(reportForm.value.reportType,\\n                                                    reportForm.value.projectOrTaskId)\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option *ngIf=\\\"reportForm.value.reportType=== '' \\\"\\n              value=\\\"\\\">\\n        Для начала выберите тип отчета\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[0]\\\"\\n              value=\\\"\\\">\\n        Выберите Проект\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[1]\\\"\\n              value=\\\"\\\">\\n        Выберите Задачу\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[0]\\\">\\n        <option *ngFor=\\\"let project of projectList\\\"\\n                [value]=\\\"project.id\\\">\\n          {{project.name}}\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[1]\\\">\\n        <option *ngFor=\\\"let task of taskList\\\"\\n                [value]=\\\"task.id\\\">\\n          {{task.name}}\\n        </option>\\n      </template>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"creatorId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['userId']\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option value=\\\"\\\">\\n        Выберите пользователя\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' &&\\n                participantList.length == 0\\\">\\n        <option selected value=\\\"\\\">\\n          Нету назначенных исполнителей\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' \\\">\\n        <option [value]=\\\"user.id\\\"\\n                *ngFor=\\\"let user of participantList\\\">\\n          {{user.name}}\\n        </option>\\n      </template>\\n    </select>\\n  </div>\\n\\n  <div id=\\\"dates\\\">\\n\\n    <label for=\\\"startDate\\\">С</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['startDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"startDate\\\" type=\\\"date\\\">\\n\\n    <label for=\\\"endDate\\\">По</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['endDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"endDate\\\" type=\\\"date\\\">\\n  </div>\\n\\n  <button type=\\\"submit\\\"\\n          [disabled]=\\\"!reportForm.valid\\\">\\n    Создать отчет\\n  </button>\\n</form>\\n\\n\\n<div id=\\\"report-show-bar\\\">\\n  <report-show-bar\\n    [reportList]=\\\"reportList\\\">\\n\\n  </report-show-bar>\\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 2.chunk.js\n **/","import {Injectable} from \"@angular/core\";\nimport {Http, Headers,URLSearchParams} from \"@angular/http\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class API_Report {\n  constructor(private http:Http) {\n  }\n\n  private getJsonHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return headers\n  }\n\n  private getUrlencodedHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return headers\n  }\n\n  private correctOffset(offset:string):string {\n    return offset.replace('+', '%2B')\n  }\n\n  public createReport(report:string, workTime:string, workDate:string, taskId:string, utcOffset:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    params.set('taskId', taskId);\n\n    let transferData:any = JSON.stringify({\n      report: report,\n      workTime: workTime,\n      workDate: workDate,\n    });\n\n    return this.http.post('/api/report/createReport', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public getTaskAllReportList(taskId:string, utcOffset:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    params.set('taskId', taskId);\n\n    return this.http.get('/api/report/getTaskAllReportList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public getProjectReportList(utcOffset:string, projectId:string, userId:string,\n                              startDate:string, endDate:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    if (projectId.length!=0)\n      params.set('projectId', projectId);\n    if (userId.length!=0)\n      params.set('creatorId', userId);\n    if (startDate.length!=0)\n      params.set('startDate', startDate);\n    if (endDate.length!=0)\n      params.set('endDate', endDate);\n\n    return this.http.get('/api/report/getProjectReportList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public getTaskReportList(utcOffset:string, projectId:string, userId:string,\n                              startDate:string, endDate:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    if (projectId.length!=0)\n      params.set('taskId', projectId);\n    if (userId.length!=0)\n      params.set('creatorId', userId);\n    if (startDate.length!=0)\n      params.set('startDate', startDate);\n    if (endDate.length!=0)\n      params.set('endDate', endDate);\n\n    return this.http.get('/api/report/getTaskReportList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/api/API_Report.service.ts\n **/","import {Injectable} from \"@angular/core\";\nimport {Http, Headers,URLSearchParams} from \"@angular/http\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class API_Task {\n  constructor(private http:Http) {\n  }\n\n  private getJsonHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return headers\n  }\n\n  private getUrlencodedHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return headers\n  }\n\n  private correctOffset(offset:string):string {\n    return offset.replace('+', '%2B')\n  }\n\n\n  public getProjectHighTaskList(projectId:string, utcOffset:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('projectId', projectId);\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    return this.http.get('/api/task/getProjectHighTaskList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n\n  public getCreatedTaskList(utcOffset:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    return this.http.get('/api/task/getCreatedTaskList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public createTask(taskName:string, projectName:string, utcOffset:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n\n    let transferData:any = JSON.stringify({name: taskName, ancestorProjectId: projectName});\n\n    return this.http.post('/api/task/createTask', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public addTaskExecutor(taskId:string, userId:string):any {\n    let transferData:any = JSON.stringify({id: userId});\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('taskId', taskId);\n\n    return this.http.put('/api/task/addTaskExecutor', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n\n  }\n\n  public changeName(taskId:string, name:string):any {\n    let transferData:any = JSON.stringify({id: taskId, name: name});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setName', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public changeStatus(taskId:string, status:string):any {\n    let transferData:any = JSON.stringify({id: taskId, status: status});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setStatus', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public changeDescription(taskId:string, description:string):any {\n    let transferData:any = JSON.stringify({id: taskId, description: description});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setDescription', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public checkLowLevelAuthorities(taskId:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('id', taskId);\n    return this.http.get('/api/task/checkLowLevelAuthorities', {\n      headers: headers, search: params\n    }).map(res => res.json());\n\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/api/API_Task.service.ts\n **/","import {Injectable} from \"@angular/core\";\nimport {Http, Headers,URLSearchParams} from \"@angular/http\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class API_User {\n  constructor(private http:Http) {\n  }\n\n  private getJsonHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return headers\n  }\n\n  private getUrlencodedHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return headers\n  }\n\n  private correctOffset(offset:string):string {\n    return offset.replace('+', '%2B')\n  }\n\n  public getUserList():any {\n    let headers:Headers = this.getUrlencodedHeader();\n    return this.http.get('/api/user/getUserList').map(res => res.json());\n  }\n\n  public getParticipantProjectUserList(projectId?:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n\n    if(projectId!=undefined)\n    params.set('projectId', projectId);\n\n    return this.http.get('/api/user/getParticipantProjectUserList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public getParticipantTaskUserList(taskId:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n\n    params.set('taskId', taskId);\n\n    return this.http.get('/api/user/getParticipantTaskUserList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/api/API_User.service.ts\n **/","import {Serializable} from './serializable.class.ts'\n\nimport {TaskDTO} from './taskDTO.class'\nimport {UserDTO} from './userDTO.class'\n\nexport class ProjectDTO extends Serializable{\n  id:string;\n  name:string;\n  description:string;\n  creationDateTime:string;\n  status:string;\n  taskList:TaskDTO[]=[];\n  owner:UserDTO;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/projectDTO.class.ts\n **/","import {Serializable} from './serializable.class.ts'\nimport {UserDTO} from './userDTO.class'\n\nexport class ReportDTO extends Serializable{\n  id:string;\n  report:string;\n  workTime:string;\n  workDate:string;\n  creationDateTime:string;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/reportDTO.class.ts\n **/","import {Serializable} from './serializable.class.ts'\n\nimport {ReportDTO} from './reportDTO.class'\n\nexport class ReporterDTO extends Serializable {\n  id:string;\n  name:string;\n  taskElapsedTime:string;\n  reportList:ReportDTO[]=[];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/reporterDTO.class.ts\n **/","export class Serializable {\n  public fillFromJSON(json: string):void {\n    var jsonObj = JSON.parse(json);\n    for (var propName in jsonObj)\n      this[propName] = jsonObj[propName]\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/serializable.class.ts\n **/","import {Serializable} from './serializable.class.ts'\nimport {UserDTO} from './userDTO.class'\nimport {ReporterDTO} from './reporterDTO.class'\n\nexport class TaskDTO extends Serializable{\n  id:string;\n  name:string;\n  description:string;\n  creationDateTime:string;\n  plannedEndDateTime:string;\n  actualEndDateTime:string;\n  status:string;\n  creator:UserDTO;\n  executor:UserDTO;\n  reporterList:ReporterDTO[]=[];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/taskDTO.class.ts\n **/","import {Serializable} from './serializable.class.ts'\n\nexport class UserDTO extends Serializable {\n  id:string;\n  name:string;\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/userDTO.class.ts\n **/","import {Component,ViewEncapsulation,Input} from '@angular/core';\n\nimport {ProjectDTO} from '../../../globalServices/entitiesDTO/projectDTO.class';\nimport {TaskDTO} from '../../../globalServices/entitiesDTO/taskDTO.class';\nimport {ReportDTO} from '../../../globalServices/entitiesDTO/reportDTO.class';\nimport {UserDTO} from '../../../globalServices/entitiesDTO/userDTO.class';\n\n\n@Component({\n  selector: 'report-show-bar',\n  providers: [],\n  directives: [],\n  pipes: [],\n  encapsulation: ViewEncapsulation.Native,\n  styles: [require('./reportShowBar.css')],\n  template: require('./reportShowBar.html')\n})\nexport class ReportShowBar {\n\n  @Input() reportList:any;\n  private reportListDTO:ReportDTO;\n\n  constructor() {\n\n  }\n\n  public ngOnInit():void {\n\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/timeTracker/reports/reportShowBar/reportShowBar.component.ts\n **/","module.exports = \"<h1>SHowBar как=никак</h1>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/timeTracker/reports/reportShowBar/reportShowBar.html\n ** module id = 779\n ** module chunks = 2\n **/","import {Component,ViewEncapsulation,EventEmitter} from '@angular/core';\nimport {ControlGroup,FormBuilder,Validators} from '@angular/common';\n\nimport {API_Report} from '../../globalServices/api/API_Report.service';\nimport {API_Project} from '../../globalServices/api/API_Project.service';\nimport {API_Task} from '../../globalServices/api/API_Task.service';\nimport {API_User} from '../../globalServices/api/API_User.service';\nimport {ProjectDTO} from '../../globalServices/entitiesDTO/projectDTO.class';\nimport {TaskDTO} from '../../globalServices/entitiesDTO/taskDTO.class';\nimport {ReportDTO} from '../../globalServices/entitiesDTO/reportDTO.class';\nimport {ReporterDTO} from '../../globalServices/entitiesDTO/reporterDTO.class';\nimport {UserDTO} from '../../globalServices/entitiesDTO/userDTO.class';\n\n\nimport {DateFormatter} from '../../globalServices/dateFromatter/dateFormatter.service';\nimport {ReportShowBar} from './reportShowBar/reportShowBar.component';\n\n\n@Component({\n  selector: 'reports',\n  providers: [API_Project, API_Task, API_User, API_Report],\n  directives: [ReportShowBar],\n  pipes: [],\n  encapsulation: ViewEncapsulation.Native,\n  styles: [require('./reports.css')],\n  template: require('./reports.html')\n})\nexport class Reports {\n\n  private reportTypeList:string[] = ['Проект', 'Задача'];\n  private projectList:ProjectDTO[] = [];\n  private taskList:TaskDTO[] = [];\n  private participantList:UserDTO[] = [];\n  private reportList:any[];\n  private reportProjectList:ProjectDTO[] = [];\n\n  reportForm:ControlGroup;\n\n  constructor(private api_Report:API_Report,\n              private api_Project:API_Project,\n              private api_Task:API_Task,\n              private api_User:API_User,\n              private dateFormatter:DateFormatter,\n              private formBuilder:FormBuilder) {\n\n  }\n\n  public ngOnInit():void {\n    this.reportForm = this.formBuilder.group({\n      'reportType': ['', Validators.required],\n      'projectOrTaskId': [''],\n      'userId': [''],\n      'startDate': [''],\n      'endDate': [''],\n    });\n  }\n\n  public createReport(value:any):void {\n    if (value.reportType == this.reportTypeList[0]) {\n      if (this.participantList.length == 0)\n        console.log('Отчеты по проектам отсутствуют, т.к нету исполнителей');\n      else\n        this.createProjectReport(value);\n    }\n\n    if (value.reportType == this.reportTypeList[1]) {\n      if (this.participantList.length == 0)\n        console.log('Отчеты по задачам отсутствуют, т.к нету исполнителей');\n      else\n        this.createTaskReport(value);\n\n    }\n  }\n\n  public createProjectReport(value:any):void {\n    this.api_Report.getProjectReportList(this.dateFormatter.getUtcOffset(), value.projectOrTaskId,\n      value.userId, value.startDate, value.endDate).subscribe(\n      data => {\n        console.log(data);\n        this.reportList = data.responseObjects.reportProjectList;\n        this.fillDetailReportProjectList(data.responseObjects.reportProjectList);\n        console.log(this.reportProjectList);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  public createTaskReport(value:any):void {\n    this.api_Report.getTaskReportList(this.dateFormatter.getUtcOffset(), value.projectOrTaskId,\n      value.userId, value.startDate, value.endDate).subscribe(\n      data => {\n        console.log(data);\n        this.reportList = data.responseObjects.reportList;\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  /** Загружает массив доступных проектов либо заданий для данного пользователя,\n   * в зависимости от выбранного типа отчета. Так же получает список пользователей,\n   * доступных для просмотра отчета*/\n  public getProjectOrTaskList(reportType:string):void {\n    this.participantList.splice(0);\n    this.getProjectParticipant();\n\n    if (reportType === this.reportTypeList[0]\n      && this.projectList.length == 0)\n      this.getProjectList();\n\n    if (reportType === this.reportTypeList[1]\n      && this.taskList.length == 0)\n      this.getTaskList();\n  }\n\n  public getProjectList() {\n\n    this.api_Project.getCreatedProjectList(this.dateFormatter.getUtcOffset()).subscribe(\n      data => {\n        console.log(data);\n        this.pushTransferProjectListToDTO(data.responseObjects.projectList);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  public getTaskList() {\n\n    this.api_Task.getCreatedTaskList(this.dateFormatter.getUtcOffset()).subscribe(\n      data => {\n        console.log(data);\n        this.pushTransferTaskListToDTO(data.responseObjects.taskList);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n\n  }\n\n  public pushTransferProjectListToDTO(data:any[]):void {\n    for (let i = 0; i < data.length; i++) {\n      let newProjectDTO = new ProjectDTO();\n      newProjectDTO.fillFromJSON(JSON.stringify(data[i]));\n      newProjectDTO.creationDateTime = this.dateFormatter\n        .changeDateTimeToRuWithPattern(newProjectDTO.creationDateTime, \"Do MMMM YYYY\");\n      this.projectList.push(newProjectDTO);\n    }\n  }\n\n  public pushTransferTaskListToDTO(data:any[]):void {\n    for (let i = 0; i < data.length; i++) {\n      let newTaskDTO = new TaskDTO();\n      newTaskDTO.fillFromJSON(JSON.stringify(data[i]));\n      newTaskDTO.creationDateTime = this.dateFormatter\n        .changeDateTimeToRuWithPattern(newTaskDTO.creationDateTime, \"Do MMMM YYYY\");\n      this.taskList.push(newTaskDTO);\n    }\n  }\n\n  public getParticipantUserList(reportType:string, projectOrTaskId:string):void {\n    this.participantList.splice(0);\n\n    if (projectOrTaskId.length != 0) {\n      if (reportType == this.reportTypeList[0])\n        this.getProjectParticipant(projectOrTaskId);\n\n      if (reportType == this.reportTypeList[1])\n        this.getTaskParticipant(projectOrTaskId);\n    }\n    else\n      this.getProjectParticipant();\n  }\n\n  public getProjectParticipant(projectId?:string):void {\n    this.api_User.getParticipantProjectUserList(projectId).subscribe(\n      data => {\n        console.log(data);\n        for (let i = 0; i < data.responseObjects.userList.length; i++) {\n          let newUserDTO = new UserDTO();\n          newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\n          this.participantList.push(newUserDTO);\n        }\n\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  public getTaskParticipant(taskId:string):void {\n    this.api_User.getParticipantTaskUserList(taskId).subscribe(\n      data => {\n        console.log(data);\n        for (let i = 0; i < data.responseObjects.userList.length; i++) {\n          let newUserDTO = new UserDTO();\n          newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\n          this.participantList.push(newUserDTO);\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  public fillDetailReportProjectList(data:any[]) {\n    for (let i = 0; i < data.length; i++) {\n      let newProjectDTO:ProjectDTO = new ProjectDTO();\n      newProjectDTO.id = data[i].id;\n      newProjectDTO.name = data[i].name;\n      console.log(newProjectDTO);\n\n      for (let x = 0; x < data[i].taskList.length; x++) {\n        let newTaskDTO:TaskDTO = new TaskDTO();\n        newTaskDTO.id = data[i].taskList[x].id;\n        newTaskDTO.name = data[i].taskList[x].name;\n        console.log(newTaskDTO);\n\n        for (let z = 0; z < data[i].taskList[x].reporterList.length; z++) {\n          let newReporterDTO:ReporterDTO = new ReporterDTO();\n          newReporterDTO.id = data[z].taskList[x].reporterList[z].id;\n          newReporterDTO.name = data[i].taskList[x].reporterList[z].name;\n          newReporterDTO.taskElapsedTime = data[i].taskList[x].reporterList[z].taskElapsedTime;\n          console.log(newReporterDTO);\n\n          for (let y = 0; y < data[i].taskList[x].reporterList[z].reportList.length; z++) {\n            let newReportDTO:ReportDTO = new ReportDTO();\n            newReportDTO.fillFromJSON(JSON.stringify(data[i].taskList[x].reporterList[z].reportList[y]));\n            newReportDTO.creationDateTime = this.dateFormatter\n              .changeDateTimeToRuWithPattern(newReportDTO.creationDateTime, \"Do MMMM YYYY\");\n            console.log(newReportDTO);\n\n            newReporterDTO.reportList.push(newReportDTO);\n            console.log('ОПа');\n          }\n          newTaskDTO.reporterList.push(newReporterDTO);\n        }\n        newProjectDTO.taskList.push(newTaskDTO);\n      }\n      this.reportProjectList.push(newProjectDTO);\n    }\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/timeTracker/reports/reports.component.ts\n **/","module.exports = \"<form id=\\\"reportForm\\\"\\n      [ngFormModel]=\\\"reportForm\\\"\\n      (ngSubmit)=\\\"createReport(reportForm.value)\\\">\\n\\n  <div id=\\\"reportType\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['reportType']\\\"\\n            (ngModelChange)=\\\"getProjectOrTaskList(reportForm.value.reportType)\\\">\\n\\n      <option value=\\\"\\\">Выберите тип отчета</option>\\n\\n      <option\\n        *ngFor=\\\"let reportType of reportTypeList\\\">\\n        {{reportType}}\\n      </option>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"projectOrTaskId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['projectOrTaskId']\\\"\\n            (ngModelChange)=\\\"getParticipantUserList(reportForm.value.reportType,\\n                                                    reportForm.value.projectOrTaskId)\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option *ngIf=\\\"reportForm.value.reportType=== '' \\\"\\n              value=\\\"\\\">\\n        Для начала выберите тип отчета\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[0]\\\"\\n              value=\\\"\\\">\\n        Выберите Проект\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[1]\\\"\\n              value=\\\"\\\">\\n        Выберите Задачу\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[0]\\\">\\n        <option *ngFor=\\\"let project of projectList\\\"\\n                [value]=\\\"project.id\\\">\\n          {{project.name}}\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[1]\\\">\\n        <option *ngFor=\\\"let task of taskList\\\"\\n                [value]=\\\"task.id\\\">\\n          {{task.name}}\\n        </option>\\n      </template>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"creatorId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['userId']\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option value=\\\"\\\">\\n        Выберите пользователя\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' &&\\n                participantList.length == 0\\\">\\n        <option selected value=\\\"\\\">\\n          Нету назначенных исполнителей\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' \\\">\\n        <option [value]=\\\"user.id\\\"\\n                *ngFor=\\\"let user of participantList\\\">\\n          {{user.name}}\\n        </option>\\n      </template>\\n    </select>\\n  </div>\\n\\n  <div id=\\\"dates\\\">\\n\\n    <label for=\\\"startDate\\\">С</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['startDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"startDate\\\" type=\\\"date\\\">\\n\\n    <label for=\\\"endDate\\\">По</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['endDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"endDate\\\" type=\\\"date\\\">\\n  </div>\\n\\n  <button type=\\\"submit\\\"\\n          [disabled]=\\\"!reportForm.valid\\\">\\n    Создать отчет\\n  </button>\\n</form>\\n\\n\\n<div id=\\\"report-show-bar\\\">\\n  <report-show-bar\\n    [reportList]=\\\"reportList\\\">\\n\\n  </report-show-bar>\\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/timeTracker/reports/reports.html\n ** module id = 781\n ** module chunks = 2\n **/"],"sourceRoot":""}