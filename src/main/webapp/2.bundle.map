{"version":3,"sources":["webpack:///2.chunk.js","webpack:///./src/app/globalServices/api/API_Report.service.ts","webpack:///./src/app/globalServices/api/API_Task.service.ts","webpack:///./src/app/globalServices/entitiesDTO/projectDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/reportDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/reporterDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/serializable.class.ts","webpack:///./src/app/globalServices/entitiesDTO/taskDTO.class.ts","webpack:///./src/app/globalServices/entitiesDTO/userDTO.class.ts","webpack:///./src/app/timeTracker/reports/reportShowBar/reportShowBar.component.ts","webpack:///./src/app/timeTracker/reports/reportShowBar/reportShowBar.css","webpack:///./src/app/timeTracker/reports/reportShowBar/reportShowBar.html","webpack:///./src/app/timeTracker/reports/reports.component.ts","webpack:///./src/app/timeTracker/reports/reports.css","webpack:///./src/app/timeTracker/reports/reports.html"],"names":["webpackJsonp","753","module","exports","__webpack_require__","core_1","http_1","API_Report","http","this","prototype","getJsonHeader","headers","Headers","append","getUrlencodedHeader","correctOffset","offset","replace","createReport","report","workTime","workDate","taskId","utcOffset","params","URLSearchParams","set","transferData","JSON","stringify","post","search","map","res","json","getTaskReporterList","get","getReportList","reportType","projectOrTaskId","userId","startDate","endDate","length","getTaskReportList","projectId","__decorate","Injectable","__metadata","Http","751","API_Task","getProjectHighTaskList","getCreatedTaskList","createTask","taskName","name","addTaskExecutor","id","put","changeName","changeStatus","status","changeDescription","description","checkLowLevelAuthorities","checkHighLevelAuthorities","752","serializable_class_ts_1","ProjectDTO","_super","apply","arguments","taskList","__extends","Serializable","756","ReportDTO","754","ReporterDTO","reportList","749","fillFromJSON","jsonObj","parse","propName","750","TaskDTO","reporterList","755","UserDTO","762","ReportShowBar","showErrorMessage","ngOnInit","ngDoCheck","reportCreated","reportProjectList","Input","Array","String","Component","selector","providers","directives","pipes","encapsulation","ViewEncapsulation","Native","styles","template","777","778","467","common_1","API_Report_service_1","API_Project_service_1","API_Task_service_1","API_User_service_1","projectDTO_class_1","taskDTO_class_1","reportDTO_class_1","reporterDTO_class_1","userDTO_class_1","dateFormatter_service_1","reportShowBar_component_1","Reports","api_Report","api_Project","api_Task","api_User","dateFormatter","formBuilder","reportTypeList","projectList","participantList","reportForm","group","Validators","required","getReport","value","_this","splice","getUtcOffset","subscribe","data","fillDetailReportProjectList","responseObjects","error","console","log","getProjectOrTaskList","getProjectParticipant","getProjectList","getTaskList","getCreatedProjectList","pushTransferProjectListToDTO","pushTransferTaskListToDTO","i","newProjectDTO","creationDateTime","changeDateTimeToRuWithPattern","push","newTaskDTO","getParticipantUserList","getTaskParticipant","getParticipantProjectUserList","userList","newUserDTO","getParticipantTaskUserList","x","z","newReporterDTO","taskElapsedTime","y","newReportDTO","transformTime","API_Project","API_User","DateFormatter","FormBuilder","779","780"],"mappings":"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","file":"2.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 753:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar http_1 = __webpack_require__(99);\r\n\t__webpack_require__(137);\r\n\tvar API_Report = (function () {\r\n\t    function API_Report(http) {\r\n\t        this.http = http;\r\n\t    }\r\n\t    API_Report.prototype.getJsonHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/json');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Report.prototype.getUrlencodedHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Report.prototype.correctOffset = function (offset) {\r\n\t        return offset.replace('+', '%2B');\r\n\t    };\r\n\t    API_Report.prototype.createReport = function (report, workTime, workDate, taskId, utcOffset) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        params.set('taskId', taskId);\r\n\t        var transferData = JSON.stringify({\r\n\t            report: report,\r\n\t            workTime: workTime,\r\n\t            workDate: workDate,\r\n\t        });\r\n\t        return this.http.post('/api/report/createReport', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report.prototype.getTaskReporterList = function (taskId, utcOffset) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        params.set('taskId', taskId);\r\n\t        return this.http.get('/api/report/getTaskReporterList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report.prototype.getReportList = function (utcOffset, reportType, projectOrTaskId, userId, startDate, endDate) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        if (reportType == 'Проект')\r\n\t            params.set('reportType', '1');\r\n\t        if (reportType == 'Задача')\r\n\t            params.set('reportType', '2');\r\n\t        if (projectOrTaskId.length != 0)\r\n\t            params.set('projectOrTaskId', projectOrTaskId);\r\n\t        if (userId.length != 0)\r\n\t            params.set('creatorId', userId);\r\n\t        if (startDate.length != 0)\r\n\t            params.set('startDate', startDate);\r\n\t        if (endDate.length != 0)\r\n\t            params.set('endDate', endDate);\r\n\t        return this.http.get('/api/report/getReportList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report.prototype.getTaskReportList = function (utcOffset, projectId, userId, startDate, endDate) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        if (projectId.length != 0)\r\n\t            params.set('taskId', projectId);\r\n\t        if (userId.length != 0)\r\n\t            params.set('creatorId', userId);\r\n\t        if (startDate.length != 0)\r\n\t            params.set('startDate', startDate);\r\n\t        if (endDate.length != 0)\r\n\t            params.set('endDate', endDate);\r\n\t        return this.http.get('/api/report/getTaskReportList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Report = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [http_1.Http])\r\n\t    ], API_Report);\r\n\t    return API_Report;\r\n\t}());\r\n\texports.API_Report = API_Report;\r\n\n\n/***/ },\n\n/***/ 751:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar http_1 = __webpack_require__(99);\r\n\t__webpack_require__(137);\r\n\tvar API_Task = (function () {\r\n\t    function API_Task(http) {\r\n\t        this.http = http;\r\n\t    }\r\n\t    API_Task.prototype.getJsonHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/json');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Task.prototype.getUrlencodedHeader = function () {\r\n\t        var headers = new http_1.Headers();\r\n\t        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n\t        return headers;\r\n\t    };\r\n\t    API_Task.prototype.correctOffset = function (offset) {\r\n\t        return offset.replace('+', '%2B');\r\n\t    };\r\n\t    API_Task.prototype.getProjectHighTaskList = function (projectId, utcOffset) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('projectId', projectId);\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        return this.http.get('/api/task/getProjectHighTaskList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.getCreatedTaskList = function (utcOffset) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        return this.http.get('/api/task/getCreatedTaskList', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.createTask = function (taskName, projectId, utcOffset) {\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('utcOffset', this.correctOffset(utcOffset));\r\n\t        params.set('ancestorProjectId', projectId);\r\n\t        var transferData = JSON.stringify({ name: taskName });\r\n\t        return this.http.post('/api/task/createTask', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.addTaskExecutor = function (taskId, userId) {\r\n\t        var transferData = JSON.stringify({ id: userId });\r\n\t        var headers = this.getJsonHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('taskId', taskId);\r\n\t        return this.http.put('/api/task/addTaskExecutor', transferData, {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeName = function (taskId, name) {\r\n\t        var transferData = JSON.stringify({ id: taskId, name: name });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setName', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeStatus = function (taskId, status) {\r\n\t        var transferData = JSON.stringify({ id: taskId, status: status });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setStatus', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.changeDescription = function (taskId, description) {\r\n\t        var transferData = JSON.stringify({ id: taskId, description: description });\r\n\t        var headers = this.getJsonHeader();\r\n\t        return this.http.put('/api/task/setDescription', transferData, {\r\n\t            headers: headers\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.checkLowLevelAuthorities = function (taskId) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('id', taskId);\r\n\t        return this.http.get('/api/task/checkLowLevelAuthorities', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task.prototype.checkHighLevelAuthorities = function (taskId) {\r\n\t        var headers = this.getUrlencodedHeader();\r\n\t        var params = new http_1.URLSearchParams();\r\n\t        params.set('id', taskId);\r\n\t        return this.http.get('/api/task/checkHighLevelAuthorities', {\r\n\t            headers: headers, search: params\r\n\t        }).map(function (res) { return res.json(); });\r\n\t    };\r\n\t    API_Task = __decorate([\r\n\t        core_1.Injectable(), \r\n\t        __metadata('design:paramtypes', [http_1.Http])\r\n\t    ], API_Task);\r\n\t    return API_Task;\r\n\t}());\r\n\texports.API_Task = API_Task;\r\n\n\n/***/ },\n\n/***/ 752:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(749);\r\n\tvar ProjectDTO = (function (_super) {\r\n\t    __extends(ProjectDTO, _super);\r\n\t    function ProjectDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.taskList = [];\r\n\t    }\r\n\t    return ProjectDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.ProjectDTO = ProjectDTO;\r\n\n\n/***/ },\n\n/***/ 756:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(749);\r\n\tvar ReportDTO = (function (_super) {\r\n\t    __extends(ReportDTO, _super);\r\n\t    function ReportDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    return ReportDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.ReportDTO = ReportDTO;\r\n\n\n/***/ },\n\n/***/ 754:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(749);\r\n\tvar ReporterDTO = (function (_super) {\r\n\t    __extends(ReporterDTO, _super);\r\n\t    function ReporterDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.reportList = [];\r\n\t    }\r\n\t    return ReporterDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.ReporterDTO = ReporterDTO;\r\n\n\n/***/ },\n\n/***/ 749:\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Serializable = (function () {\r\n\t    function Serializable() {\r\n\t    }\r\n\t    Serializable.prototype.fillFromJSON = function (json) {\r\n\t        var jsonObj = JSON.parse(json);\r\n\t        for (var propName in jsonObj)\r\n\t            this[propName] = jsonObj[propName];\r\n\t    };\r\n\t    return Serializable;\r\n\t}());\r\n\texports.Serializable = Serializable;\r\n\n\n/***/ },\n\n/***/ 750:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(749);\r\n\tvar TaskDTO = (function (_super) {\r\n\t    __extends(TaskDTO, _super);\r\n\t    function TaskDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.reporterList = [];\r\n\t    }\r\n\t    return TaskDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.TaskDTO = TaskDTO;\r\n\n\n/***/ },\n\n/***/ 755:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar serializable_class_ts_1 = __webpack_require__(749);\r\n\tvar UserDTO = (function (_super) {\r\n\t    __extends(UserDTO, _super);\r\n\t    function UserDTO() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    return UserDTO;\r\n\t}(serializable_class_ts_1.Serializable));\r\n\texports.UserDTO = UserDTO;\r\n\n\n/***/ },\n\n/***/ 762:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar ReportShowBar = (function () {\r\n\t    function ReportShowBar() {\r\n\t        this.showErrorMessage = false;\r\n\t    }\r\n\t    ReportShowBar.prototype.ngOnInit = function () {\r\n\t    };\r\n\t    ReportShowBar.prototype.ngDoCheck = function () {\r\n\t        if (this.reportCreated == 'true') {\r\n\t            if (this.reportProjectList.length != 0)\r\n\t                this.showErrorMessage = false;\r\n\t            else\r\n\t                this.showErrorMessage = true;\r\n\t        }\r\n\t        else\r\n\t            this.showErrorMessage = false;\r\n\t    };\r\n\t    __decorate([\r\n\t        core_1.Input(), \r\n\t        __metadata('design:type', Array)\r\n\t    ], ReportShowBar.prototype, \"reportProjectList\", void 0);\r\n\t    __decorate([\r\n\t        core_1.Input(), \r\n\t        __metadata('design:type', String)\r\n\t    ], ReportShowBar.prototype, \"reportCreated\", void 0);\r\n\t    ReportShowBar = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'report-show-bar',\r\n\t            providers: [],\r\n\t            directives: [],\r\n\t            pipes: [],\r\n\t            encapsulation: core_1.ViewEncapsulation.Native,\r\n\t            styles: [__webpack_require__(777)],\r\n\t            template: __webpack_require__(778)\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [])\r\n\t    ], ReportShowBar);\r\n\t    return ReportShowBar;\r\n\t}());\r\n\texports.ReportShowBar = ReportShowBar;\r\n\n\n/***/ },\n\n/***/ 777:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"#report-bar{\\n  width: 40%;\\n}\\n\\nul {\\n  list-style: none;\\n}\\n\\n#project-part {\\n  padding: 5px;\\n  color: white;\\n  font-size: 20px;\\n  background-color: rgba(26, 177, 136, 1);\\n}\\n\\n#task-part {\\n  padding: 3px;\\n  color: white;\\n  font-size: 18px;\\n  background-color: rgba(26, 177, 136, 0.8);\\n}\\n\\n#reporter-part {\\n  padding: 2px;\\n  color: white;\\n  font-size: 16px;\\n  background-color: rgba(26, 177, 136, 0.6);\\n}\\n\\n#report-part {\\n  margin: 2px 0;\\n  background: white;\\n}\\n\\n#report-part p {\\n  margin: 0 0 5px 2px;\\n  padding: 2px;\\n  font-size: 16px;\\n}\\n\\n#report-part span {\\n  padding: 2px;\\n  margin-right: 5px;\\n  font-size: 14px;\\n  color: rgba(26, 177, 136, 1)\\n}\\n\\n\"\n\n/***/ },\n\n/***/ 778:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div id=\\\"report-bar\\\">\\n  <span *ngIf=\\\"showErrorMessage\\\">\\n    Отчеты по данным критериям отсутствуют\\n  </span>\\n  <ul>\\n    <li *ngFor=\\\"let project of reportProjectList\\\">\\n      <div id=\\\"project-part\\\">\\n        <span>Проект: {{project.name}}</span>\\n      </div>\\n      <ul>\\n        <li *ngFor=\\\"let task of project.taskList\\\">\\n          <div id=\\\"task-part\\\">\\n            <span>Задание: {{task.name}}</span>\\n          </div>\\n          <ul>\\n            <li *ngFor=\\\"let reporter of task.reporterList\\\">\\n              <div id=\\\"reporter-part\\\">\\n                <span> Репортер: {{reporter.name}}</span>\\n                <span> Общее затраченное время: {{reporter.taskElapsedTime}}</span>\\n                <span> Отчеты: </span>\\n              </div>\\n              <ul>\\n                <li *ngFor=\\\"let report of reporter.reportList\\\">\\n                  <div id=\\\"report-part\\\">\\n                    <p>{{report.report}}</p>\\n                    <span>\\n                      Времени затрачено: {{report.workTime}}\\n                    </span>\\n                    <span>Отчет за: {{report.workDate}}</span>\\n                  </div>\\n                </li>\\n              </ul>\\n            </li>\\n          </ul>\\n        <li>\\n      </ul>\\n\\n    </li>\\n  </ul>\\n</div>\\n\"\n\n/***/ },\n\n/***/ 467:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar core_1 = __webpack_require__(1);\r\n\tvar common_1 = __webpack_require__(53);\r\n\tvar API_Report_service_1 = __webpack_require__(753);\r\n\tvar API_Project_service_1 = __webpack_require__(464);\r\n\tvar API_Task_service_1 = __webpack_require__(751);\r\n\tvar API_User_service_1 = __webpack_require__(463);\r\n\tvar projectDTO_class_1 = __webpack_require__(752);\r\n\tvar taskDTO_class_1 = __webpack_require__(750);\r\n\tvar reportDTO_class_1 = __webpack_require__(756);\r\n\tvar reporterDTO_class_1 = __webpack_require__(754);\r\n\tvar userDTO_class_1 = __webpack_require__(755);\r\n\tvar dateFormatter_service_1 = __webpack_require__(462);\r\n\tvar reportShowBar_component_1 = __webpack_require__(762);\r\n\tvar Reports = (function () {\r\n\t    function Reports(api_Report, api_Project, api_Task, api_User, dateFormatter, formBuilder) {\r\n\t        this.api_Report = api_Report;\r\n\t        this.api_Project = api_Project;\r\n\t        this.api_Task = api_Task;\r\n\t        this.api_User = api_User;\r\n\t        this.dateFormatter = dateFormatter;\r\n\t        this.formBuilder = formBuilder;\r\n\t        this.reportTypeList = ['Проект', 'Задача'];\r\n\t        this.projectList = [];\r\n\t        this.taskList = [];\r\n\t        this.participantList = [];\r\n\t        this.reportProjectList = [];\r\n\t        this.reportCreated = 'false';\r\n\t    }\r\n\t    Reports.prototype.ngOnInit = function () {\r\n\t        this.reportForm = this.formBuilder.group({\r\n\t            'reportType': ['', common_1.Validators.required],\r\n\t            'projectOrTaskId': [''],\r\n\t            'userId': [''],\r\n\t            'startDate': [''],\r\n\t            'endDate': [''],\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.getReport = function (value) {\r\n\t        var _this = this;\r\n\t        if (this.reportProjectList.length != 0)\r\n\t            this.reportProjectList.splice(0);\r\n\t        if (this.participantList.length != 0) {\r\n\t            this.api_Report.getReportList(this.dateFormatter.getUtcOffset(), value.reportType, value.projectOrTaskId, value.userId, value.startDate, value.endDate).subscribe(function (data) {\r\n\t                _this.fillDetailReportProjectList(data.responseObjects.reportProjectList);\r\n\t                _this.reportCreated = 'true';\r\n\t            }, function (error) {\r\n\t                console.log(error);\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            if (value.reportType == this.reportTypeList[0])\r\n\t                console.log('Отчеты по проектам отсутствуют, т.к нету исполнителей');\r\n\t            else\r\n\t                console.log('Отчеты по задачам отсутствуют, т.к нету исполнителей');\r\n\t        }\r\n\t    };\r\n\t    /** Загружает массив доступных проектов либо заданий для данного пользователя,\r\n\t     * в зависимости от выбранного типа отчета. Так же получает список пользователей,\r\n\t     * доступных для просмотра отчета*/\r\n\t    Reports.prototype.getProjectOrTaskList = function (reportType) {\r\n\t        this.participantList.splice(0);\r\n\t        this.getProjectParticipant();\r\n\t        if (reportType === this.reportTypeList[0]\r\n\t            && this.projectList.length == 0)\r\n\t            this.getProjectList();\r\n\t        if (reportType === this.reportTypeList[1]\r\n\t            && this.taskList.length == 0)\r\n\t            this.getTaskList();\r\n\t    };\r\n\t    Reports.prototype.getProjectList = function () {\r\n\t        var _this = this;\r\n\t        this.api_Project.getCreatedProjectList(this.dateFormatter.getUtcOffset()).subscribe(function (data) {\r\n\t            _this.pushTransferProjectListToDTO(data.responseObjects.projectList);\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.getTaskList = function () {\r\n\t        var _this = this;\r\n\t        this.api_Task.getCreatedTaskList(this.dateFormatter.getUtcOffset()).subscribe(function (data) {\r\n\t            _this.pushTransferTaskListToDTO(data.responseObjects.taskList);\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.pushTransferProjectListToDTO = function (data) {\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            var newProjectDTO = new projectDTO_class_1.ProjectDTO();\r\n\t            newProjectDTO.fillFromJSON(JSON.stringify(data[i]));\r\n\t            newProjectDTO.creationDateTime = this.dateFormatter\r\n\t                .changeDateTimeToRuWithPattern(newProjectDTO.creationDateTime, \"Do MMMM YYYY\");\r\n\t            this.projectList.push(newProjectDTO);\r\n\t        }\r\n\t    };\r\n\t    Reports.prototype.pushTransferTaskListToDTO = function (data) {\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            var newTaskDTO = new taskDTO_class_1.TaskDTO();\r\n\t            newTaskDTO.fillFromJSON(JSON.stringify(data[i]));\r\n\t            newTaskDTO.creationDateTime = this.dateFormatter\r\n\t                .changeDateTimeToRuWithPattern(newTaskDTO.creationDateTime, \"Do MMMM YYYY\");\r\n\t            this.taskList.push(newTaskDTO);\r\n\t        }\r\n\t    };\r\n\t    Reports.prototype.getParticipantUserList = function (reportType, projectOrTaskId) {\r\n\t        this.participantList.splice(0);\r\n\t        if (projectOrTaskId.length != 0) {\r\n\t            if (reportType == this.reportTypeList[0])\r\n\t                this.getProjectParticipant(projectOrTaskId);\r\n\t            if (reportType == this.reportTypeList[1])\r\n\t                this.getTaskParticipant(projectOrTaskId);\r\n\t        }\r\n\t        else\r\n\t            this.getProjectParticipant();\r\n\t    };\r\n\t    Reports.prototype.getProjectParticipant = function (projectId) {\r\n\t        var _this = this;\r\n\t        this.api_User.getParticipantProjectUserList(projectId).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            for (var i = 0; i < data.responseObjects.userList.length; i++) {\r\n\t                var newUserDTO = new userDTO_class_1.UserDTO();\r\n\t                newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\r\n\t                _this.participantList.push(newUserDTO);\r\n\t            }\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.getTaskParticipant = function (taskId) {\r\n\t        var _this = this;\r\n\t        this.api_User.getParticipantTaskUserList(taskId).subscribe(function (data) {\r\n\t            console.log(data);\r\n\t            for (var i = 0; i < data.responseObjects.userList.length; i++) {\r\n\t                var newUserDTO = new userDTO_class_1.UserDTO();\r\n\t                newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\r\n\t                _this.participantList.push(newUserDTO);\r\n\t            }\r\n\t        }, function (error) {\r\n\t            console.log(error);\r\n\t        });\r\n\t    };\r\n\t    Reports.prototype.fillDetailReportProjectList = function (data) {\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            var newProjectDTO = new projectDTO_class_1.ProjectDTO();\r\n\t            newProjectDTO.id = data[i].id;\r\n\t            newProjectDTO.name = data[i].name;\r\n\t            for (var x = 0; x < data[i].taskList.length; x++) {\r\n\t                var newTaskDTO = new taskDTO_class_1.TaskDTO();\r\n\t                newTaskDTO.id = data[i].taskList[x].id;\r\n\t                newTaskDTO.name = data[i].taskList[x].name;\r\n\t                for (var z = 0; z < data[i].taskList[x].reporterList.length; z++) {\r\n\t                    var newReporterDTO = new reporterDTO_class_1.ReporterDTO();\r\n\t                    newReporterDTO.id = data[i].taskList[x].reporterList[z].id;\r\n\t                    newReporterDTO.name = data[i].taskList[x].reporterList[z].name;\r\n\t                    newReporterDTO.taskElapsedTime = data[i].taskList[x].reporterList[z].taskElapsedTime;\r\n\t                    for (var y = 0; y < data[i].taskList[x].reporterList[z].reportList.length; y++) {\r\n\t                        var newReportDTO = new reportDTO_class_1.ReportDTO();\r\n\t                        newReportDTO.fillFromJSON(JSON.stringify(data[i].taskList[x].reporterList[z].reportList[y]));\r\n\t                        newReportDTO.workTime = this.dateFormatter.transformTime(newReportDTO.workTime);\r\n\t                        newReportDTO.creationDateTime = this.dateFormatter\r\n\t                            .changeDateTimeToRuWithPattern(newReportDTO.creationDateTime, \"Do MMMM YYYY\");\r\n\t                        newReporterDTO.reportList.push(newReportDTO);\r\n\t                    }\r\n\t                    newTaskDTO.reporterList.push(newReporterDTO);\r\n\t                }\r\n\t                newProjectDTO.taskList.push(newTaskDTO);\r\n\t            }\r\n\t            this.reportProjectList.push(newProjectDTO);\r\n\t        }\r\n\t    };\r\n\t    Reports = __decorate([\r\n\t        core_1.Component({\r\n\t            selector: 'reports',\r\n\t            providers: [API_Project_service_1.API_Project, API_Task_service_1.API_Task, API_User_service_1.API_User, API_Report_service_1.API_Report],\r\n\t            directives: [reportShowBar_component_1.ReportShowBar],\r\n\t            pipes: [],\r\n\t            encapsulation: core_1.ViewEncapsulation.Native,\r\n\t            styles: [__webpack_require__(779)],\r\n\t            template: __webpack_require__(780)\r\n\t        }), \r\n\t        __metadata('design:paramtypes', [API_Report_service_1.API_Report, API_Project_service_1.API_Project, API_Task_service_1.API_Task, API_User_service_1.API_User, dateFormatter_service_1.DateFormatter, common_1.FormBuilder])\r\n\t    ], Reports);\r\n\t    return Reports;\r\n\t}());\r\n\texports.Reports = Reports;\r\n\n\n/***/ },\n\n/***/ 779:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\\n\"\n\n/***/ },\n\n/***/ 780:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<form id=\\\"reportForm\\\"\\n      [ngFormModel]=\\\"reportForm\\\"\\n      (ngSubmit)=\\\"getReport(reportForm.value)\\\">\\n\\n  <div id=\\\"reportType\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['reportType']\\\"\\n            (ngModelChange)=\\\"getProjectOrTaskList(reportForm.value.reportType)\\\">\\n\\n      <option value=\\\"\\\">Выберите тип отчета</option>\\n\\n      <option\\n        *ngFor=\\\"let reportType of reportTypeList\\\">\\n        {{reportType}}\\n      </option>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"projectOrTaskId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['projectOrTaskId']\\\"\\n            (ngModelChange)=\\\"getParticipantUserList(reportForm.value.reportType,\\n                                                    reportForm.value.projectOrTaskId)\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option *ngIf=\\\"reportForm.value.reportType=== '' \\\"\\n              value=\\\"\\\">\\n        Для начала выберите тип отчета\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[0]\\\"\\n              value=\\\"\\\">\\n        Выберите Проект\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[1]\\\"\\n              value=\\\"\\\">\\n        Выберите Задачу\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[0]\\\">\\n        <option *ngFor=\\\"let project of projectList\\\"\\n                [value]=\\\"project.id\\\">\\n          {{project.name}}\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[1]\\\">\\n        <option *ngFor=\\\"let task of taskList\\\"\\n                [value]=\\\"task.id\\\">\\n          {{task.name}}\\n        </option>\\n      </template>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"creatorId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['userId']\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option value=\\\"\\\">\\n        Выберите пользователя\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' &&\\n                participantList.length == 0\\\">\\n        <option selected value=\\\"\\\">\\n          Нету назначенных исполнителей\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' \\\">\\n        <option [value]=\\\"user.id\\\"\\n                *ngFor=\\\"let user of participantList\\\">\\n          {{user.userName}}\\n        </option>\\n      </template>\\n    </select>\\n  </div>\\n\\n  <div id=\\\"dates\\\">\\n\\n    <label for=\\\"startDate\\\">С</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['startDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"startDate\\\" type=\\\"date\\\">\\n\\n    <label for=\\\"endDate\\\">По</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['endDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"endDate\\\" type=\\\"date\\\">\\n  </div>\\n\\n  <button type=\\\"submit\\\"\\n          [disabled]=\\\"!reportForm.valid\\\">\\n    Создать отчет\\n  </button>\\n</form>\\n\\n\\n<div id=\\\"report-show-bar\\\">\\n\\n  <report-show-bar\\n    [reportProjectList]=\\\"reportProjectList\\\"\\n    [reportCreated]=\\\"reportCreated\\\">\\n  </report-show-bar>\\n\\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 2.chunk.js\n **/","import {Injectable} from \"@angular/core\";\nimport {Http, Headers,URLSearchParams} from \"@angular/http\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class API_Report {\n  constructor(private http:Http) {\n  }\n\n  private getJsonHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return headers\n  }\n\n  private getUrlencodedHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return headers\n  }\n\n  private correctOffset(offset:string):string {\n    return offset.replace('+', '%2B')\n  }\n\n  public createReport(report:string, workTime:string, workDate:string, taskId:string, utcOffset:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    params.set('taskId', taskId);\n\n    let transferData:any = JSON.stringify({\n      report: report,\n      workTime: workTime,\n      workDate: workDate,\n    });\n\n    return this.http.post('/api/report/createReport', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public getTaskReporterList(taskId:string, utcOffset:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    params.set('taskId', taskId);\n\n    return this.http.get('/api/report/getTaskReporterList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public getReportList(utcOffset:string, reportType:string, projectOrTaskId:string, userId:string,\n                       startDate:string, endDate:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    if (reportType == 'Проект')\n      params.set('reportType', '1');\n    if (reportType == 'Задача')\n      params.set('reportType', '2');\n    if (projectOrTaskId.length != 0)\n      params.set('projectOrTaskId', projectOrTaskId);\n    if (userId.length != 0)\n      params.set('creatorId', userId);\n    if (startDate.length != 0)\n      params.set('startDate', startDate);\n    if (endDate.length != 0)\n      params.set('endDate', endDate);\n\n    return this.http.get('/api/report/getReportList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public getTaskReportList(utcOffset:string, projectId:string, userId:string,\n                           startDate:string, endDate:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    if (projectId.length != 0)\n      params.set('taskId', projectId);\n    if (userId.length != 0)\n      params.set('creatorId', userId);\n    if (startDate.length != 0)\n      params.set('startDate', startDate);\n    if (endDate.length != 0)\n      params.set('endDate', endDate);\n\n    return this.http.get('/api/report/getTaskReportList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/api/API_Report.service.ts\n **/","import {Injectable} from \"@angular/core\";\nimport {Http, Headers,URLSearchParams} from \"@angular/http\";\nimport \"rxjs/add/operator/map\";\n\n@Injectable()\nexport class API_Task {\n  constructor(private http:Http) {\n  }\n\n  private getJsonHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return headers\n  }\n\n  private getUrlencodedHeader():Headers {\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return headers\n  }\n\n  private correctOffset(offset:string):string {\n    return offset.replace('+', '%2B')\n  }\n\n\n  public getProjectHighTaskList(projectId:string, utcOffset:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('projectId', projectId);\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    return this.http.get('/api/task/getProjectHighTaskList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n\n  public getCreatedTaskList(utcOffset:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    return this.http.get('/api/task/getCreatedTaskList', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public createTask(taskName:string, projectId:string, utcOffset:string):any {\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('utcOffset', this.correctOffset(utcOffset));\n    params.set('ancestorProjectId', projectId);\n\n    let transferData:any = JSON.stringify({name: taskName});\n\n    return this.http.post('/api/task/createTask', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public addTaskExecutor(taskId:string, userId:string):any {\n    let transferData:any = JSON.stringify({id: userId});\n    let headers:Headers = this.getJsonHeader();\n\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('taskId', taskId);\n\n    return this.http.put('/api/task/addTaskExecutor', transferData, {\n      headers: headers, search: params\n    }).map(res => res.json());\n\n  }\n\n  public changeName(taskId:string, name:string):any {\n    let transferData:any = JSON.stringify({id: taskId, name: name});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setName', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public changeStatus(taskId:string, status:string):any {\n    let transferData:any = JSON.stringify({id: taskId, status: status});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setStatus', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public changeDescription(taskId:string, description:string):any {\n    let transferData:any = JSON.stringify({id: taskId, description: description});\n    let headers:Headers = this.getJsonHeader();\n    return this.http.put('/api/task/setDescription', transferData, {\n      headers: headers\n    }).map(res => res.json());\n\n  }\n\n  public checkLowLevelAuthorities(taskId:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('id', taskId);\n    return this.http.get('/api/task/checkLowLevelAuthorities', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n\n  public checkHighLevelAuthorities(taskId:string):any {\n    let headers:Headers = this.getUrlencodedHeader();\n    let params:URLSearchParams = new URLSearchParams();\n    params.set('id', taskId);\n    return this.http.get('/api/task/checkHighLevelAuthorities', {\n      headers: headers, search: params\n    }).map(res => res.json());\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/api/API_Task.service.ts\n **/","import {Serializable} from './serializable.class.ts'\n\nimport {TaskDTO} from './taskDTO.class'\nimport {UserDTO} from './userDTO.class'\n\nexport class ProjectDTO extends Serializable{\n  id:string;\n  name:string;\n  description:string;\n  creationDateTime:string;\n  status:string;\n  taskList:TaskDTO[]=[];\n  creator:UserDTO;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/projectDTO.class.ts\n **/","import {Serializable} from './serializable.class.ts'\nimport {UserDTO} from './userDTO.class'\n\nexport class ReportDTO extends Serializable{\n  id:string;\n  report:string;\n  workTime:string;\n  workDate:string;\n  creationDateTime:string;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/reportDTO.class.ts\n **/","import {Serializable} from './serializable.class.ts'\n\nimport {ReportDTO} from './reportDTO.class'\n\nexport class ReporterDTO extends Serializable {\n  id:string;\n  name:string;\n  taskElapsedTime:string;\n  reportList:ReportDTO[]=[];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/reporterDTO.class.ts\n **/","export class Serializable {\n  public fillFromJSON(json: string):void {\n    var jsonObj = JSON.parse(json);\n    for (var propName in jsonObj)\n      this[propName] = jsonObj[propName]\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/serializable.class.ts\n **/","import {Serializable} from './serializable.class.ts'\nimport {UserDTO} from './userDTO.class'\nimport {ReporterDTO} from './reporterDTO.class'\n\nexport class TaskDTO extends Serializable{\n  id:string;\n  name:string;\n  description:string;\n  creationDateTime:string;\n  plannedEndDateTime:string;\n  actualEndDateTime:string;\n  status:string;\n  creator:UserDTO;\n  executor:UserDTO;\n  reporterList:ReporterDTO[]=[];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/taskDTO.class.ts\n **/","import {Serializable} from './serializable.class.ts'\n\nexport class UserDTO extends Serializable {\n  id:string;\n  userName:string;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/globalServices/entitiesDTO/userDTO.class.ts\n **/","import {Component,ViewEncapsulation,Input} from '@angular/core';\n\nimport {ProjectDTO} from '../../../globalServices/entitiesDTO/projectDTO.class';\nimport {TaskDTO} from '../../../globalServices/entitiesDTO/taskDTO.class';\nimport {ReportDTO} from '../../../globalServices/entitiesDTO/reportDTO.class';\nimport {UserDTO} from '../../../globalServices/entitiesDTO/userDTO.class';\n\n\n@Component({\n  selector: 'report-show-bar',\n  providers: [],\n  directives: [],\n  pipes: [],\n  encapsulation: ViewEncapsulation.Native,\n  styles: [require('./reportShowBar.css')],\n  template: require('./reportShowBar.html')\n})\nexport class ReportShowBar {\n\n  @Input() reportProjectList:ProjectDTO[];\n  @Input() reportCreated:string;\n  private showErrorMessage = false;\n\n  constructor() {\n  }\n\n  public ngOnInit():void {\n  }\n\n  public ngDoCheck ():void {\n\n    if (this.reportCreated == 'true') {\n      if (this.reportProjectList.length != 0)\n        this.showErrorMessage = false;\n      else\n        this.showErrorMessage = true;\n    }\n    else\n      this.showErrorMessage = false;\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/timeTracker/reports/reportShowBar/reportShowBar.component.ts\n **/","module.exports = \"#report-bar{\\n  width: 40%;\\n}\\n\\nul {\\n  list-style: none;\\n}\\n\\n#project-part {\\n  padding: 5px;\\n  color: white;\\n  font-size: 20px;\\n  background-color: rgba(26, 177, 136, 1);\\n}\\n\\n#task-part {\\n  padding: 3px;\\n  color: white;\\n  font-size: 18px;\\n  background-color: rgba(26, 177, 136, 0.8);\\n}\\n\\n#reporter-part {\\n  padding: 2px;\\n  color: white;\\n  font-size: 16px;\\n  background-color: rgba(26, 177, 136, 0.6);\\n}\\n\\n#report-part {\\n  margin: 2px 0;\\n  background: white;\\n}\\n\\n#report-part p {\\n  margin: 0 0 5px 2px;\\n  padding: 2px;\\n  font-size: 16px;\\n}\\n\\n#report-part span {\\n  padding: 2px;\\n  margin-right: 5px;\\n  font-size: 14px;\\n  color: rgba(26, 177, 136, 1)\\n}\\n\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/timeTracker/reports/reportShowBar/reportShowBar.css\n ** module id = 777\n ** module chunks = 2\n **/","module.exports = \"<div id=\\\"report-bar\\\">\\n  <span *ngIf=\\\"showErrorMessage\\\">\\n    Отчеты по данным критериям отсутствуют\\n  </span>\\n  <ul>\\n    <li *ngFor=\\\"let project of reportProjectList\\\">\\n      <div id=\\\"project-part\\\">\\n        <span>Проект: {{project.name}}</span>\\n      </div>\\n      <ul>\\n        <li *ngFor=\\\"let task of project.taskList\\\">\\n          <div id=\\\"task-part\\\">\\n            <span>Задание: {{task.name}}</span>\\n          </div>\\n          <ul>\\n            <li *ngFor=\\\"let reporter of task.reporterList\\\">\\n              <div id=\\\"reporter-part\\\">\\n                <span> Репортер: {{reporter.name}}</span>\\n                <span> Общее затраченное время: {{reporter.taskElapsedTime}}</span>\\n                <span> Отчеты: </span>\\n              </div>\\n              <ul>\\n                <li *ngFor=\\\"let report of reporter.reportList\\\">\\n                  <div id=\\\"report-part\\\">\\n                    <p>{{report.report}}</p>\\n                    <span>\\n                      Времени затрачено: {{report.workTime}}\\n                    </span>\\n                    <span>Отчет за: {{report.workDate}}</span>\\n                  </div>\\n                </li>\\n              </ul>\\n            </li>\\n          </ul>\\n        <li>\\n      </ul>\\n\\n    </li>\\n  </ul>\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/timeTracker/reports/reportShowBar/reportShowBar.html\n ** module id = 778\n ** module chunks = 2\n **/","import {Component,ViewEncapsulation,EventEmitter} from '@angular/core';\nimport {ControlGroup,FormBuilder,Validators} from '@angular/common';\n\nimport {API_Report} from '../../globalServices/api/API_Report.service';\nimport {API_Project} from '../../globalServices/api/API_Project.service';\nimport {API_Task} from '../../globalServices/api/API_Task.service';\nimport {API_User} from '../../globalServices/api/API_User.service';\nimport {ProjectDTO} from '../../globalServices/entitiesDTO/projectDTO.class';\nimport {TaskDTO} from '../../globalServices/entitiesDTO/taskDTO.class';\nimport {ReportDTO} from '../../globalServices/entitiesDTO/reportDTO.class';\nimport {ReporterDTO} from '../../globalServices/entitiesDTO/reporterDTO.class';\nimport {UserDTO} from '../../globalServices/entitiesDTO/userDTO.class';\n\n\nimport {DateFormatter} from '../../globalServices/dateFromatter/dateFormatter.service';\nimport {ReportShowBar} from './reportShowBar/reportShowBar.component';\n\n\n@Component({\n  selector: 'reports',\n  providers: [API_Project, API_Task, API_User, API_Report],\n  directives: [ReportShowBar],\n  pipes: [],\n  encapsulation: ViewEncapsulation.Native,\n  styles: [require('./reports.css')],\n  template: require('./reports.html')\n})\nexport class Reports {\n\n  private reportTypeList:string[] = ['Проект', 'Задача'];\n  private projectList:ProjectDTO[] = [];\n  private taskList:TaskDTO[] = [];\n  private participantList:UserDTO[] = [];\n  private reportProjectList:ProjectDTO[] = [];\n  private reportCreated:string='false';\n\n  private reportForm:ControlGroup;\n\n  constructor(private api_Report:API_Report,\n              private api_Project:API_Project,\n              private api_Task:API_Task,\n              private api_User:API_User,\n              private dateFormatter:DateFormatter,\n              private formBuilder:FormBuilder) {\n\n  }\n\n  public ngOnInit():void {\n    this.reportForm = this.formBuilder.group({\n      'reportType': ['', Validators.required],\n      'projectOrTaskId': [''],\n      'userId': [''],\n      'startDate': [''],\n      'endDate': [''],\n    });\n  }\n\n  public getReport(value:any):void {\n\n    if(this.reportProjectList.length!=0)\n      this.reportProjectList.splice(0);\n\n    if (this.participantList.length != 0){\n      this.api_Report.getReportList(this.dateFormatter.getUtcOffset(),value.reportType, value.projectOrTaskId,\n        value.userId, value.startDate, value.endDate).subscribe(\n        data => {\n          this.fillDetailReportProjectList(data.responseObjects.reportProjectList);\n          this.reportCreated='true';\n        },\n        error => {\n          console.log(error);\n        }\n      );\n    }\n\n    else{\n\n      if (value.reportType == this.reportTypeList[0])\n        console.log('Отчеты по проектам отсутствуют, т.к нету исполнителей');\n      else\n        console.log('Отчеты по задачам отсутствуют, т.к нету исполнителей');\n    }\n  }\n\n  /** Загружает массив доступных проектов либо заданий для данного пользователя,\n   * в зависимости от выбранного типа отчета. Так же получает список пользователей,\n   * доступных для просмотра отчета*/\n  public getProjectOrTaskList(reportType:string):void {\n    this.participantList.splice(0);\n    this.getProjectParticipant();\n\n    if (reportType === this.reportTypeList[0]\n      && this.projectList.length == 0)\n      this.getProjectList();\n\n    if (reportType === this.reportTypeList[1]\n      && this.taskList.length == 0)\n      this.getTaskList();\n  }\n\n  public getProjectList() {\n\n    this.api_Project.getCreatedProjectList(this.dateFormatter.getUtcOffset()).subscribe(\n      data => {\n        this.pushTransferProjectListToDTO(data.responseObjects.projectList);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  public getTaskList() {\n\n    this.api_Task.getCreatedTaskList(this.dateFormatter.getUtcOffset()).subscribe(\n      data => {\n        this.pushTransferTaskListToDTO(data.responseObjects.taskList);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n\n  }\n\n  public pushTransferProjectListToDTO(data:any[]):void {\n    for (let i = 0; i < data.length; i++) {\n      let newProjectDTO = new ProjectDTO();\n      newProjectDTO.fillFromJSON(JSON.stringify(data[i]));\n      newProjectDTO.creationDateTime = this.dateFormatter\n        .changeDateTimeToRuWithPattern(newProjectDTO.creationDateTime, \"Do MMMM YYYY\");\n      this.projectList.push(newProjectDTO);\n    }\n  }\n\n  public pushTransferTaskListToDTO(data:any[]):void {\n    for (let i = 0; i < data.length; i++) {\n      let newTaskDTO = new TaskDTO();\n      newTaskDTO.fillFromJSON(JSON.stringify(data[i]));\n      newTaskDTO.creationDateTime = this.dateFormatter\n        .changeDateTimeToRuWithPattern(newTaskDTO.creationDateTime, \"Do MMMM YYYY\");\n      this.taskList.push(newTaskDTO);\n    }\n  }\n\n  public getParticipantUserList(reportType:string, projectOrTaskId:string):void {\n    this.participantList.splice(0);\n\n    if (projectOrTaskId.length != 0) {\n      if (reportType == this.reportTypeList[0])\n        this.getProjectParticipant(projectOrTaskId);\n\n      if (reportType == this.reportTypeList[1])\n        this.getTaskParticipant(projectOrTaskId);\n    }\n    else\n      this.getProjectParticipant();\n  }\n\n  public getProjectParticipant(projectId?:string):void {\n    this.api_User.getParticipantProjectUserList(projectId).subscribe(\n      data => {\n        console.log(data);\n        for (let i = 0; i < data.responseObjects.userList.length; i++) {\n          let newUserDTO = new UserDTO();\n          newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\n          this.participantList.push(newUserDTO);\n        }\n\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  public getTaskParticipant(taskId:string):void {\n    this.api_User.getParticipantTaskUserList(taskId).subscribe(\n      data => {\n        console.log(data);\n        for (let i = 0; i < data.responseObjects.userList.length; i++) {\n          let newUserDTO = new UserDTO();\n          newUserDTO.fillFromJSON(JSON.stringify(data.responseObjects.userList[i]));\n          this.participantList.push(newUserDTO);\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  public fillDetailReportProjectList(data:any[]) {\n    for (let i = 0; i < data.length; i++) {\n      let newProjectDTO:ProjectDTO = new ProjectDTO();\n      newProjectDTO.id = data[i].id;\n      newProjectDTO.name = data[i].name;\n\n      for (let x = 0; x < data[i].taskList.length; x++) {\n        let newTaskDTO:TaskDTO = new TaskDTO();\n        newTaskDTO.id = data[i].taskList[x].id;\n        newTaskDTO.name = data[i].taskList[x].name;\n\n        for (let z = 0; z < data[i].taskList[x].reporterList.length; z++) {\n          let newReporterDTO:ReporterDTO = new ReporterDTO();\n          newReporterDTO.id = data[i].taskList[x].reporterList[z].id;\n          newReporterDTO.name = data[i].taskList[x].reporterList[z].name;\n          newReporterDTO.taskElapsedTime = data[i].taskList[x].reporterList[z].taskElapsedTime;\n\n          for (let y = 0; y < data[i].taskList[x].reporterList[z].reportList.length; y++) {\n            let newReportDTO:ReportDTO = new ReportDTO();\n            newReportDTO.fillFromJSON(JSON.stringify(data[i].taskList[x].reporterList[z].reportList[y]));\n            newReportDTO.workTime=this.dateFormatter.transformTime(newReportDTO.workTime);\n            newReportDTO.creationDateTime = this.dateFormatter\n              .changeDateTimeToRuWithPattern(newReportDTO.creationDateTime, \"Do MMMM YYYY\");\n\n            newReporterDTO.reportList.push(newReportDTO);\n          }\n          newTaskDTO.reporterList.push(newReporterDTO);\n        }\n        newProjectDTO.taskList.push(newTaskDTO);\n      }\n      this.reportProjectList.push(newProjectDTO);\n    }\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/timeTracker/reports/reports.component.ts\n **/","module.exports = \"\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/timeTracker/reports/reports.css\n ** module id = 779\n ** module chunks = 2\n **/","module.exports = \"<form id=\\\"reportForm\\\"\\n      [ngFormModel]=\\\"reportForm\\\"\\n      (ngSubmit)=\\\"getReport(reportForm.value)\\\">\\n\\n  <div id=\\\"reportType\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['reportType']\\\"\\n            (ngModelChange)=\\\"getProjectOrTaskList(reportForm.value.reportType)\\\">\\n\\n      <option value=\\\"\\\">Выберите тип отчета</option>\\n\\n      <option\\n        *ngFor=\\\"let reportType of reportTypeList\\\">\\n        {{reportType}}\\n      </option>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"projectOrTaskId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['projectOrTaskId']\\\"\\n            (ngModelChange)=\\\"getParticipantUserList(reportForm.value.reportType,\\n                                                    reportForm.value.projectOrTaskId)\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option *ngIf=\\\"reportForm.value.reportType=== '' \\\"\\n              value=\\\"\\\">\\n        Для начала выберите тип отчета\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[0]\\\"\\n              value=\\\"\\\">\\n        Выберите Проект\\n      </option>\\n\\n      <option *ngIf=\\\"reportForm.value.reportType===reportTypeList[1]\\\"\\n              value=\\\"\\\">\\n        Выберите Задачу\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[0]\\\">\\n        <option *ngFor=\\\"let project of projectList\\\"\\n                [value]=\\\"project.id\\\">\\n          {{project.name}}\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType===reportTypeList[1]\\\">\\n        <option *ngFor=\\\"let task of taskList\\\"\\n                [value]=\\\"task.id\\\">\\n          {{task.name}}\\n        </option>\\n      </template>\\n\\n    </select>\\n  </div>\\n\\n  <div id=\\\"creatorId\\\">\\n    <select [ngFormControl]=\\\"reportForm.controls['userId']\\\"\\n            [disabled]=\\\"reportForm.value.reportType=== '' \\\">\\n\\n      <option value=\\\"\\\">\\n        Выберите пользователя\\n      </option>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' &&\\n                participantList.length == 0\\\">\\n        <option selected value=\\\"\\\">\\n          Нету назначенных исполнителей\\n        </option>\\n      </template>\\n\\n      <template [ngIf]=\\\"reportForm.value.reportType!= '' \\\">\\n        <option [value]=\\\"user.id\\\"\\n                *ngFor=\\\"let user of participantList\\\">\\n          {{user.userName}}\\n        </option>\\n      </template>\\n    </select>\\n  </div>\\n\\n  <div id=\\\"dates\\\">\\n\\n    <label for=\\\"startDate\\\">С</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['startDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"startDate\\\" type=\\\"date\\\">\\n\\n    <label for=\\\"endDate\\\">По</label>\\n    <input [ngFormControl]=\\\"reportForm.controls['endDate']\\\"\\n           [disabled]=\\\"reportForm.value.reportType=== '' \\\"\\n           id=\\\"endDate\\\" type=\\\"date\\\">\\n  </div>\\n\\n  <button type=\\\"submit\\\"\\n          [disabled]=\\\"!reportForm.valid\\\">\\n    Создать отчет\\n  </button>\\n</form>\\n\\n\\n<div id=\\\"report-show-bar\\\">\\n\\n  <report-show-bar\\n    [reportProjectList]=\\\"reportProjectList\\\"\\n    [reportCreated]=\\\"reportCreated\\\">\\n  </report-show-bar>\\n\\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/timeTracker/reports/reports.html\n ** module id = 780\n ** module chunks = 2\n **/"],"sourceRoot":""}